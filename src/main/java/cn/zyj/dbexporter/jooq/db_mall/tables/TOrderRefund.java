/*
 * This file is generated by jOOQ.
 */
package cn.zyj.dbexporter.jooq.db_mall.tables;


import cn.zyj.dbexporter.jooq.db_mall.DbMall;
import cn.zyj.dbexporter.jooq.db_mall.Indexes;
import cn.zyj.dbexporter.jooq.db_mall.Keys;
import cn.zyj.dbexporter.jooq.db_mall.tables.records.TOrderRefundRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TOrderRefund extends TableImpl<TOrderRefundRecord> {

    private static final long serialVersionUID = 1815452541;

    /**
     * The reference instance of <code>db_mall.t_order_refund</code>
     */
    public static final TOrderRefund T_ORDER_REFUND = new TOrderRefund();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TOrderRefundRecord> getRecordType() {
        return TOrderRefundRecord.class;
    }

    /**
     * The column <code>db_mall.t_order_refund.id</code>.
     */
    public final TableField<TOrderRefundRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>db_mall.t_order_refund.item_id</code>.
     */
    public final TableField<TOrderRefundRecord, Long> ITEM_ID = createField("item_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>db_mall.t_order_refund.item_detail_id</code>.
     */
    public final TableField<TOrderRefundRecord, Long> ITEM_DETAIL_ID = createField("item_detail_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>db_mall.t_order_refund.order_id</code>.
     */
    public final TableField<TOrderRefundRecord, String> ORDER_ID = createField("order_id", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>db_mall.t_order_refund.amount</code>.
     */
    public final TableField<TOrderRefundRecord, BigDecimal> AMOUNT = createField("amount", org.jooq.impl.SQLDataType.DECIMAL(10, 2).nullable(false).defaultValue(org.jooq.impl.DSL.inline("0.00", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>db_mall.t_order_refund.type</code>.
     */
    public final TableField<TOrderRefundRecord, Integer> TYPE = createField("type", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>db_mall.t_order_refund.month</code>. 期数
     */
    public final TableField<TOrderRefundRecord, Integer> MONTH = createField("month", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "期数");

    /**
     * The column <code>db_mall.t_order_refund.money_type</code>.
     */
    public final TableField<TOrderRefundRecord, Integer> MONEY_TYPE = createField("money_type", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>db_mall.t_order_refund.reason</code>.
     */
    public final TableField<TOrderRefundRecord, String> REASON = createField("reason", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>db_mall.t_order_refund.remark</code>.
     */
    public final TableField<TOrderRefundRecord, String> REMARK = createField("remark", org.jooq.impl.SQLDataType.VARCHAR(500).defaultValue(org.jooq.impl.DSL.inline(" ", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>db_mall.t_order_refund.bill_id</code>.
     */
    public final TableField<TOrderRefundRecord, Long> BILL_ID = createField("bill_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>db_mall.t_order_refund.sns</code>.
     */
    public final TableField<TOrderRefundRecord, String> SNS = createField("sns", org.jooq.impl.SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>db_mall.t_order_refund.sync_status</code>.
     */
    public final TableField<TOrderRefundRecord, Byte> SYNC_STATUS = createField("sync_status", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>db_mall.t_order_refund.cdate</code>.
     */
    public final TableField<TOrderRefundRecord, Timestamp> CDATE = createField("cdate", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>db_mall.t_order_refund.mdate</code>.
     */
    public final TableField<TOrderRefundRecord, Timestamp> MDATE = createField("mdate", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>db_mall.t_order_refund</code> table reference
     */
    public TOrderRefund() {
        this(DSL.name("t_order_refund"), null);
    }

    /**
     * Create an aliased <code>db_mall.t_order_refund</code> table reference
     */
    public TOrderRefund(String alias) {
        this(DSL.name(alias), T_ORDER_REFUND);
    }

    /**
     * Create an aliased <code>db_mall.t_order_refund</code> table reference
     */
    public TOrderRefund(Name alias) {
        this(alias, T_ORDER_REFUND);
    }

    private TOrderRefund(Name alias, Table<TOrderRefundRecord> aliased) {
        this(alias, aliased, null);
    }

    private TOrderRefund(Name alias, Table<TOrderRefundRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TOrderRefund(Table<O> child, ForeignKey<O, TOrderRefundRecord> key) {
        super(child, key, T_ORDER_REFUND);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbMall.DB_MALL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_ORDER_REFUND_BILL_ID, Indexes.T_ORDER_REFUND_PRIMARY, Indexes.T_ORDER_REFUND_SYNC_STATUS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TOrderRefundRecord, Integer> getIdentity() {
        return Keys.IDENTITY_T_ORDER_REFUND;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TOrderRefundRecord> getPrimaryKey() {
        return Keys.KEY_T_ORDER_REFUND_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TOrderRefundRecord>> getKeys() {
        return Arrays.<UniqueKey<TOrderRefundRecord>>asList(Keys.KEY_T_ORDER_REFUND_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TOrderRefund as(String alias) {
        return new TOrderRefund(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TOrderRefund as(Name alias) {
        return new TOrderRefund(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TOrderRefund rename(String name) {
        return new TOrderRefund(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TOrderRefund rename(Name name) {
        return new TOrderRefund(name, null);
    }
}
