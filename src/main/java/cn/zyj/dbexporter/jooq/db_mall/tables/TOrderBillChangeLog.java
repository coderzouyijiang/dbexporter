/*
 * This file is generated by jOOQ.
 */
package cn.zyj.dbexporter.jooq.db_mall.tables;


import cn.zyj.dbexporter.jooq.db_mall.DbMall;
import cn.zyj.dbexporter.jooq.db_mall.Indexes;
import cn.zyj.dbexporter.jooq.db_mall.Keys;
import cn.zyj.dbexporter.jooq.db_mall.tables.records.TOrderBillChangeLogRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TOrderBillChangeLog extends TableImpl<TOrderBillChangeLogRecord> {

    private static final long serialVersionUID = -901266103;

    /**
     * The reference instance of <code>db_mall.t_order_bill_change_log</code>
     */
    public static final TOrderBillChangeLog T_ORDER_BILL_CHANGE_LOG = new TOrderBillChangeLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TOrderBillChangeLogRecord> getRecordType() {
        return TOrderBillChangeLogRecord.class;
    }

    /**
     * The column <code>db_mall.t_order_bill_change_log.id</code>.
     */
    public final TableField<TOrderBillChangeLogRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>db_mall.t_order_bill_change_log.bill_id</code>. 账单id
     */
    public final TableField<TOrderBillChangeLogRecord, Long> BILL_ID = createField("bill_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "账单id");

    /**
     * The column <code>db_mall.t_order_bill_change_log.old_amount</code>. 修改之前订单账单金额
     */
    public final TableField<TOrderBillChangeLogRecord, BigDecimal> OLD_AMOUNT = createField("old_amount", org.jooq.impl.SQLDataType.DECIMAL(10, 2).nullable(false), this, "修改之前订单账单金额");

    /**
     * The column <code>db_mall.t_order_bill_change_log.new_amount</code>. 修改之后订单账单金额
     */
    public final TableField<TOrderBillChangeLogRecord, BigDecimal> NEW_AMOUNT = createField("new_amount", org.jooq.impl.SQLDataType.DECIMAL(10, 2).nullable(false), this, "修改之后订单账单金额");

    /**
     * The column <code>db_mall.t_order_bill_change_log.reason</code>. 账单金额变化原因，1：退租 2：调价
     */
    public final TableField<TOrderBillChangeLogRecord, Byte> REASON = createField("reason", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "账单金额变化原因，1：退租 2：调价");

    /**
     * The column <code>db_mall.t_order_bill_change_log.cdate</code>.
     */
    public final TableField<TOrderBillChangeLogRecord, Timestamp> CDATE = createField("cdate", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>db_mall.t_order_bill_change_log.mdate</code>.
     */
    public final TableField<TOrderBillChangeLogRecord, Timestamp> MDATE = createField("mdate", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>db_mall.t_order_bill_change_log</code> table reference
     */
    public TOrderBillChangeLog() {
        this(DSL.name("t_order_bill_change_log"), null);
    }

    /**
     * Create an aliased <code>db_mall.t_order_bill_change_log</code> table reference
     */
    public TOrderBillChangeLog(String alias) {
        this(DSL.name(alias), T_ORDER_BILL_CHANGE_LOG);
    }

    /**
     * Create an aliased <code>db_mall.t_order_bill_change_log</code> table reference
     */
    public TOrderBillChangeLog(Name alias) {
        this(alias, T_ORDER_BILL_CHANGE_LOG);
    }

    private TOrderBillChangeLog(Name alias, Table<TOrderBillChangeLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private TOrderBillChangeLog(Name alias, Table<TOrderBillChangeLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TOrderBillChangeLog(Table<O> child, ForeignKey<O, TOrderBillChangeLogRecord> key) {
        super(child, key, T_ORDER_BILL_CHANGE_LOG);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbMall.DB_MALL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_ORDER_BILL_CHANGE_LOG_BILL_ID, Indexes.T_ORDER_BILL_CHANGE_LOG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TOrderBillChangeLogRecord, Long> getIdentity() {
        return Keys.IDENTITY_T_ORDER_BILL_CHANGE_LOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TOrderBillChangeLogRecord> getPrimaryKey() {
        return Keys.KEY_T_ORDER_BILL_CHANGE_LOG_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TOrderBillChangeLogRecord>> getKeys() {
        return Arrays.<UniqueKey<TOrderBillChangeLogRecord>>asList(Keys.KEY_T_ORDER_BILL_CHANGE_LOG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TOrderBillChangeLog as(String alias) {
        return new TOrderBillChangeLog(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TOrderBillChangeLog as(Name alias) {
        return new TOrderBillChangeLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TOrderBillChangeLog rename(String name) {
        return new TOrderBillChangeLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TOrderBillChangeLog rename(Name name) {
        return new TOrderBillChangeLog(name, null);
    }
}
