/*
 * This file is generated by jOOQ.
 */
package cn.zyj.dbexporter.jooq.db_mall.tables;


import cn.zyj.dbexporter.jooq.db_mall.DbMall;
import cn.zyj.dbexporter.jooq.db_mall.Indexes;
import cn.zyj.dbexporter.jooq.db_mall.Keys;
import cn.zyj.dbexporter.jooq.db_mall.tables.records.TMessageNoticeRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TMessageNotice extends TableImpl<TMessageNoticeRecord> {

    private static final long serialVersionUID = 513194037;

    /**
     * The reference instance of <code>db_mall.t_message_notice</code>
     */
    public static final TMessageNotice T_MESSAGE_NOTICE = new TMessageNotice();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TMessageNoticeRecord> getRecordType() {
        return TMessageNoticeRecord.class;
    }

    /**
     * The column <code>db_mall.t_message_notice.id</code>.
     */
    public final TableField<TMessageNoticeRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>db_mall.t_message_notice.customer_id</code>. 用户标识
     */
    public final TableField<TMessageNoticeRecord, Long> CUSTOMER_ID = createField("customer_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "用户标识");

    /**
     * The column <code>db_mall.t_message_notice.type</code>. 业务类型：1挂应收
     */
    public final TableField<TMessageNoticeRecord, Byte> TYPE = createField("type", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "业务类型：1挂应收");

    /**
     * The column <code>db_mall.t_message_notice.status</code>. 0:未读1：已读
     */
    public final TableField<TMessageNoticeRecord, Byte> STATUS = createField("status", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "0:未读1：已读");

    /**
     * The column <code>db_mall.t_message_notice.cdate</code>. 创建时间
     */
    public final TableField<TMessageNoticeRecord, Timestamp> CDATE = createField("cdate", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>db_mall.t_message_notice.mdate</code>. 最新查看时间
     */
    public final TableField<TMessageNoticeRecord, Timestamp> MDATE = createField("mdate", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "最新查看时间");

    /**
     * Create a <code>db_mall.t_message_notice</code> table reference
     */
    public TMessageNotice() {
        this(DSL.name("t_message_notice"), null);
    }

    /**
     * Create an aliased <code>db_mall.t_message_notice</code> table reference
     */
    public TMessageNotice(String alias) {
        this(DSL.name(alias), T_MESSAGE_NOTICE);
    }

    /**
     * Create an aliased <code>db_mall.t_message_notice</code> table reference
     */
    public TMessageNotice(Name alias) {
        this(alias, T_MESSAGE_NOTICE);
    }

    private TMessageNotice(Name alias, Table<TMessageNoticeRecord> aliased) {
        this(alias, aliased, null);
    }

    private TMessageNotice(Name alias, Table<TMessageNoticeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TMessageNotice(Table<O> child, ForeignKey<O, TMessageNoticeRecord> key) {
        super(child, key, T_MESSAGE_NOTICE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbMall.DB_MALL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_MESSAGE_NOTICE_CUSTOMER_TYPE, Indexes.T_MESSAGE_NOTICE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TMessageNoticeRecord, Long> getIdentity() {
        return Keys.IDENTITY_T_MESSAGE_NOTICE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TMessageNoticeRecord> getPrimaryKey() {
        return Keys.KEY_T_MESSAGE_NOTICE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TMessageNoticeRecord>> getKeys() {
        return Arrays.<UniqueKey<TMessageNoticeRecord>>asList(Keys.KEY_T_MESSAGE_NOTICE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TMessageNotice as(String alias) {
        return new TMessageNotice(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TMessageNotice as(Name alias) {
        return new TMessageNotice(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TMessageNotice rename(String name) {
        return new TMessageNotice(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TMessageNotice rename(Name name) {
        return new TMessageNotice(name, null);
    }
}
