/*
 * This file is generated by jOOQ.
 */
package cn.zyj.dbexporter.jooq.db_mall.tables;


import cn.zyj.dbexporter.jooq.db_mall.DbMall;
import cn.zyj.dbexporter.jooq.db_mall.Indexes;
import cn.zyj.dbexporter.jooq.db_mall.Keys;
import cn.zyj.dbexporter.jooq.db_mall.tables.records.TEquipmentTransLogRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 设备事件变化历史记录表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TEquipmentTransLog extends TableImpl<TEquipmentTransLogRecord> {

    private static final long serialVersionUID = 1948806823;

    /**
     * The reference instance of <code>db_mall.t_equipment_trans_log</code>
     */
    public static final TEquipmentTransLog T_EQUIPMENT_TRANS_LOG = new TEquipmentTransLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TEquipmentTransLogRecord> getRecordType() {
        return TEquipmentTransLogRecord.class;
    }

    /**
     * The column <code>db_mall.t_equipment_trans_log.id</code>.
     */
    public final TableField<TEquipmentTransLogRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>db_mall.t_equipment_trans_log.customer_id</code>. 客户ID
     */
    public final TableField<TEquipmentTransLogRecord, Long> CUSTOMER_ID = createField("customer_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "客户ID");

    /**
     * The column <code>db_mall.t_equipment_trans_log.order_id</code>. 订单ID
     */
    public final TableField<TEquipmentTransLogRecord, String> ORDER_ID = createField("order_id", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "订单ID");

    /**
     * The column <code>db_mall.t_equipment_trans_log.sn</code>. 设备sn码
     */
    public final TableField<TEquipmentTransLogRecord, String> SN = createField("sn", org.jooq.impl.SQLDataType.VARCHAR(50), this, "设备sn码");

    /**
     * The column <code>db_mall.t_equipment_trans_log.current_status</code>. 设备当前状态
     */
    public final TableField<TEquipmentTransLogRecord, Byte> CURRENT_STATUS = createField("current_status", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "设备当前状态");

    /**
     * The column <code>db_mall.t_equipment_trans_log.source</code>. 来源，事件id
     */
    public final TableField<TEquipmentTransLogRecord, String> SOURCE = createField("source", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "来源，事件id");

    /**
     * The column <code>db_mall.t_equipment_trans_log.operate_time</code>. 操作时间
     */
    public final TableField<TEquipmentTransLogRecord, Timestamp> OPERATE_TIME = createField("operate_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "操作时间");

    /**
     * The column <code>db_mall.t_equipment_trans_log.update_time</code>. 修改时间
     */
    public final TableField<TEquipmentTransLogRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "修改时间");

    /**
     * Create a <code>db_mall.t_equipment_trans_log</code> table reference
     */
    public TEquipmentTransLog() {
        this(DSL.name("t_equipment_trans_log"), null);
    }

    /**
     * Create an aliased <code>db_mall.t_equipment_trans_log</code> table reference
     */
    public TEquipmentTransLog(String alias) {
        this(DSL.name(alias), T_EQUIPMENT_TRANS_LOG);
    }

    /**
     * Create an aliased <code>db_mall.t_equipment_trans_log</code> table reference
     */
    public TEquipmentTransLog(Name alias) {
        this(alias, T_EQUIPMENT_TRANS_LOG);
    }

    private TEquipmentTransLog(Name alias, Table<TEquipmentTransLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private TEquipmentTransLog(Name alias, Table<TEquipmentTransLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("设备事件变化历史记录表"));
    }

    public <O extends Record> TEquipmentTransLog(Table<O> child, ForeignKey<O, TEquipmentTransLogRecord> key) {
        super(child, key, T_EQUIPMENT_TRANS_LOG);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbMall.DB_MALL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_EQUIPMENT_TRANS_LOG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TEquipmentTransLogRecord, Long> getIdentity() {
        return Keys.IDENTITY_T_EQUIPMENT_TRANS_LOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TEquipmentTransLogRecord> getPrimaryKey() {
        return Keys.KEY_T_EQUIPMENT_TRANS_LOG_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TEquipmentTransLogRecord>> getKeys() {
        return Arrays.<UniqueKey<TEquipmentTransLogRecord>>asList(Keys.KEY_T_EQUIPMENT_TRANS_LOG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TEquipmentTransLog as(String alias) {
        return new TEquipmentTransLog(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TEquipmentTransLog as(Name alias) {
        return new TEquipmentTransLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TEquipmentTransLog rename(String name) {
        return new TEquipmentTransLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TEquipmentTransLog rename(Name name) {
        return new TEquipmentTransLog(name, null);
    }
}
