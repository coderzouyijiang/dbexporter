/*
 * This file is generated by jOOQ.
 */
package cn.zyj.dbexporter.jooq.db_mall.tables;


import cn.zyj.dbexporter.jooq.db_mall.DbMall;
import cn.zyj.dbexporter.jooq.db_mall.Indexes;
import cn.zyj.dbexporter.jooq.db_mall.Keys;
import cn.zyj.dbexporter.jooq.db_mall.tables.records.TOrderQueueRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TOrderQueue extends TableImpl<TOrderQueueRecord> {

    private static final long serialVersionUID = 1106037145;

    /**
     * The reference instance of <code>db_mall.t_order_queue</code>
     */
    public static final TOrderQueue T_ORDER_QUEUE = new TOrderQueue();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TOrderQueueRecord> getRecordType() {
        return TOrderQueueRecord.class;
    }

    /**
     * The column <code>db_mall.t_order_queue.id</code>.
     */
    public final TableField<TOrderQueueRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>db_mall.t_order_queue.erp_id</code>.
     */
    public final TableField<TOrderQueueRecord, Long> ERP_ID = createField("erp_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>db_mall.t_order_queue.order_id</code>.
     */
    public final TableField<TOrderQueueRecord, String> ORDER_ID = createField("order_id", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>db_mall.t_order_queue.customer_id</code>.
     */
    public final TableField<TOrderQueueRecord, Integer> CUSTOMER_ID = createField("customer_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>db_mall.t_order_queue.type_id</code>.
     */
    public final TableField<TOrderQueueRecord, Integer> TYPE_ID = createField("type_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>db_mall.t_order_queue.oper</code>.
     */
    public final TableField<TOrderQueueRecord, String> OPER = createField("oper", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>db_mall.t_order_queue.op_time</code>.
     */
    public final TableField<TOrderQueueRecord, Timestamp> OP_TIME = createField("op_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>db_mall.t_order_queue.message</code>.
     */
    public final TableField<TOrderQueueRecord, String> MESSAGE = createField("message", org.jooq.impl.SQLDataType.VARCHAR(500), this, "");

    /**
     * The column <code>db_mall.t_order_queue.values</code>.
     */
    public final TableField<TOrderQueueRecord, String> VALUES = createField("values", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>db_mall.t_order_queue.sync_status</code>.
     */
    public final TableField<TOrderQueueRecord, Byte> SYNC_STATUS = createField("sync_status", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>db_mall.t_order_queue.sync_crm_status</code>.
     */
    public final TableField<TOrderQueueRecord, Byte> SYNC_CRM_STATUS = createField("sync_crm_status", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>db_mall.t_order_queue.cdate</code>.
     */
    public final TableField<TOrderQueueRecord, Timestamp> CDATE = createField("cdate", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>db_mall.t_order_queue.mdate</code>.
     */
    public final TableField<TOrderQueueRecord, Timestamp> MDATE = createField("mdate", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>db_mall.t_order_queue</code> table reference
     */
    public TOrderQueue() {
        this(DSL.name("t_order_queue"), null);
    }

    /**
     * Create an aliased <code>db_mall.t_order_queue</code> table reference
     */
    public TOrderQueue(String alias) {
        this(DSL.name(alias), T_ORDER_QUEUE);
    }

    /**
     * Create an aliased <code>db_mall.t_order_queue</code> table reference
     */
    public TOrderQueue(Name alias) {
        this(alias, T_ORDER_QUEUE);
    }

    private TOrderQueue(Name alias, Table<TOrderQueueRecord> aliased) {
        this(alias, aliased, null);
    }

    private TOrderQueue(Name alias, Table<TOrderQueueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TOrderQueue(Table<O> child, ForeignKey<O, TOrderQueueRecord> key) {
        super(child, key, T_ORDER_QUEUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbMall.DB_MALL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_ORDER_QUEUE_CUTOMER_ID, Indexes.T_ORDER_QUEUE_ERP_ID, Indexes.T_ORDER_QUEUE_ORDER_ID, Indexes.T_ORDER_QUEUE_PRIMARY, Indexes.T_ORDER_QUEUE_ST);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TOrderQueueRecord, Long> getIdentity() {
        return Keys.IDENTITY_T_ORDER_QUEUE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TOrderQueueRecord> getPrimaryKey() {
        return Keys.KEY_T_ORDER_QUEUE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TOrderQueueRecord>> getKeys() {
        return Arrays.<UniqueKey<TOrderQueueRecord>>asList(Keys.KEY_T_ORDER_QUEUE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TOrderQueue as(String alias) {
        return new TOrderQueue(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TOrderQueue as(Name alias) {
        return new TOrderQueue(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TOrderQueue rename(String name) {
        return new TOrderQueue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TOrderQueue rename(Name name) {
        return new TOrderQueue(name, null);
    }
}
