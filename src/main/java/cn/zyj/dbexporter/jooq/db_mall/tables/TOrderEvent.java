/*
 * This file is generated by jOOQ.
 */
package cn.zyj.dbexporter.jooq.db_mall.tables;


import cn.zyj.dbexporter.jooq.db_mall.DbMall;
import cn.zyj.dbexporter.jooq.db_mall.Indexes;
import cn.zyj.dbexporter.jooq.db_mall.Keys;
import cn.zyj.dbexporter.jooq.db_mall.tables.records.TOrderEventRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 订单事件记录表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TOrderEvent extends TableImpl<TOrderEventRecord> {

    private static final long serialVersionUID = -483955316;

    /**
     * The reference instance of <code>db_mall.t_order_event</code>
     */
    public static final TOrderEvent T_ORDER_EVENT = new TOrderEvent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TOrderEventRecord> getRecordType() {
        return TOrderEventRecord.class;
    }

    /**
     * The column <code>db_mall.t_order_event.id</code>.
     */
    public final TableField<TOrderEventRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>db_mall.t_order_event.message_id</code>. MQ消息ID
     */
    public final TableField<TOrderEventRecord, String> MESSAGE_ID = createField("message_id", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "MQ消息ID");

    /**
     * The column <code>db_mall.t_order_event.customer_id</code>. 客户ID
     */
    public final TableField<TOrderEventRecord, Long> CUSTOMER_ID = createField("customer_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "客户ID");

    /**
     * The column <code>db_mall.t_order_event.order_id</code>. 订单ID
     */
    public final TableField<TOrderEventRecord, String> ORDER_ID = createField("order_id", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "订单ID");

    /**
     * The column <code>db_mall.t_order_event.operator</code>. 操作人
     */
    public final TableField<TOrderEventRecord, String> OPERATOR = createField("operator", org.jooq.impl.SQLDataType.VARCHAR(200), this, "操作人");

    /**
     * The column <code>db_mall.t_order_event.message</code>. 描述信息
     */
    public final TableField<TOrderEventRecord, String> MESSAGE = createField("message", org.jooq.impl.SQLDataType.CLOB, this, "描述信息");

    /**
     * The column <code>db_mall.t_order_event.event_type</code>. 事件类型；基数+各自类型值；基数定义：订单类型1000；设备类型2000；订单备注修改类型3000；订单收货地址修改类型4000；订单备注修改类型定为3001；订单收货地址修改类型定为4001
     */
    public final TableField<TOrderEventRecord, Integer> EVENT_TYPE = createField("event_type", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "事件类型；基数+各自类型值；基数定义：订单类型1000；设备类型2000；订单备注修改类型3000；订单收货地址修改类型4000；订单备注修改类型定为3001；订单收货地址修改类型定为4001");

    /**
     * The column <code>db_mall.t_order_event.operate_time</code>. 操作时间
     */
    public final TableField<TOrderEventRecord, Timestamp> OPERATE_TIME = createField("operate_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "操作时间");

    /**
     * The column <code>db_mall.t_order_event.update_time</code>. 修改时间
     */
    public final TableField<TOrderEventRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "修改时间");

    /**
     * Create a <code>db_mall.t_order_event</code> table reference
     */
    public TOrderEvent() {
        this(DSL.name("t_order_event"), null);
    }

    /**
     * Create an aliased <code>db_mall.t_order_event</code> table reference
     */
    public TOrderEvent(String alias) {
        this(DSL.name(alias), T_ORDER_EVENT);
    }

    /**
     * Create an aliased <code>db_mall.t_order_event</code> table reference
     */
    public TOrderEvent(Name alias) {
        this(alias, T_ORDER_EVENT);
    }

    private TOrderEvent(Name alias, Table<TOrderEventRecord> aliased) {
        this(alias, aliased, null);
    }

    private TOrderEvent(Name alias, Table<TOrderEventRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("订单事件记录表"));
    }

    public <O extends Record> TOrderEvent(Table<O> child, ForeignKey<O, TOrderEventRecord> key) {
        super(child, key, T_ORDER_EVENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbMall.DB_MALL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_ORDER_EVENT_PRIMARY, Indexes.T_ORDER_EVENT_UK_MESSAGE_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TOrderEventRecord, Long> getIdentity() {
        return Keys.IDENTITY_T_ORDER_EVENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TOrderEventRecord> getPrimaryKey() {
        return Keys.KEY_T_ORDER_EVENT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TOrderEventRecord>> getKeys() {
        return Arrays.<UniqueKey<TOrderEventRecord>>asList(Keys.KEY_T_ORDER_EVENT_PRIMARY, Keys.KEY_T_ORDER_EVENT_UK_MESSAGE_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TOrderEvent as(String alias) {
        return new TOrderEvent(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TOrderEvent as(Name alias) {
        return new TOrderEvent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TOrderEvent rename(String name) {
        return new TOrderEvent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TOrderEvent rename(Name name) {
        return new TOrderEvent(name, null);
    }
}
