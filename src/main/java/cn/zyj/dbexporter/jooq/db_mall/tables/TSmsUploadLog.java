/*
 * This file is generated by jOOQ.
 */
package cn.zyj.dbexporter.jooq.db_mall.tables;


import cn.zyj.dbexporter.jooq.db_mall.DbMall;
import cn.zyj.dbexporter.jooq.db_mall.Indexes;
import cn.zyj.dbexporter.jooq.db_mall.Keys;
import cn.zyj.dbexporter.jooq.db_mall.tables.records.TSmsUploadLogRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 畅卓上行短信
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TSmsUploadLog extends TableImpl<TSmsUploadLogRecord> {

    private static final long serialVersionUID = 298165894;

    /**
     * The reference instance of <code>db_mall.t_sms_upload_log</code>
     */
    public static final TSmsUploadLog T_SMS_UPLOAD_LOG = new TSmsUploadLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TSmsUploadLogRecord> getRecordType() {
        return TSmsUploadLogRecord.class;
    }

    /**
     * The column <code>db_mall.t_sms_upload_log.id</code>.
     */
    public final TableField<TSmsUploadLogRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>db_mall.t_sms_upload_log.mobile</code>. 手机号
     */
    public final TableField<TSmsUploadLogRecord, String> MOBILE = createField("mobile", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "手机号");

    /**
     * The column <code>db_mall.t_sms_upload_log.taskId</code>. 任务id
     */
    public final TableField<TSmsUploadLogRecord, String> TASKID = createField("taskId", org.jooq.impl.SQLDataType.VARCHAR(40).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "任务id");

    /**
     * The column <code>db_mall.t_sms_upload_log.receiveTime</code>.
     */
    public final TableField<TSmsUploadLogRecord, Timestamp> RECEIVETIME = createField("receiveTime", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>db_mall.t_sms_upload_log.extno</code>.
     */
    public final TableField<TSmsUploadLogRecord, String> EXTNO = createField("extno", org.jooq.impl.SQLDataType.VARCHAR(40).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>db_mall.t_sms_upload_log.content</code>.
     */
    public final TableField<TSmsUploadLogRecord, String> CONTENT = createField("content", org.jooq.impl.SQLDataType.VARCHAR(500).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>db_mall.t_sms_upload_log.cdate</code>. 创建时间
     */
    public final TableField<TSmsUploadLogRecord, Timestamp> CDATE = createField("cdate", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建时间");

    /**
     * Create a <code>db_mall.t_sms_upload_log</code> table reference
     */
    public TSmsUploadLog() {
        this(DSL.name("t_sms_upload_log"), null);
    }

    /**
     * Create an aliased <code>db_mall.t_sms_upload_log</code> table reference
     */
    public TSmsUploadLog(String alias) {
        this(DSL.name(alias), T_SMS_UPLOAD_LOG);
    }

    /**
     * Create an aliased <code>db_mall.t_sms_upload_log</code> table reference
     */
    public TSmsUploadLog(Name alias) {
        this(alias, T_SMS_UPLOAD_LOG);
    }

    private TSmsUploadLog(Name alias, Table<TSmsUploadLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private TSmsUploadLog(Name alias, Table<TSmsUploadLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("畅卓上行短信"));
    }

    public <O extends Record> TSmsUploadLog(Table<O> child, ForeignKey<O, TSmsUploadLogRecord> key) {
        super(child, key, T_SMS_UPLOAD_LOG);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbMall.DB_MALL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_SMS_UPLOAD_LOG_MOBILE, Indexes.T_SMS_UPLOAD_LOG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TSmsUploadLogRecord, Long> getIdentity() {
        return Keys.IDENTITY_T_SMS_UPLOAD_LOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TSmsUploadLogRecord> getPrimaryKey() {
        return Keys.KEY_T_SMS_UPLOAD_LOG_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TSmsUploadLogRecord>> getKeys() {
        return Arrays.<UniqueKey<TSmsUploadLogRecord>>asList(Keys.KEY_T_SMS_UPLOAD_LOG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TSmsUploadLog as(String alias) {
        return new TSmsUploadLog(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TSmsUploadLog as(Name alias) {
        return new TSmsUploadLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TSmsUploadLog rename(String name) {
        return new TSmsUploadLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TSmsUploadLog rename(Name name) {
        return new TSmsUploadLog(name, null);
    }
}
