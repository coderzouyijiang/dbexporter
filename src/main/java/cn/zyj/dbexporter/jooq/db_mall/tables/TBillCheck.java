/*
 * This file is generated by jOOQ.
 */
package cn.zyj.dbexporter.jooq.db_mall.tables;


import cn.zyj.dbexporter.jooq.db_mall.DbMall;
import cn.zyj.dbexporter.jooq.db_mall.Indexes;
import cn.zyj.dbexporter.jooq.db_mall.Keys;
import cn.zyj.dbexporter.jooq.db_mall.tables.records.TBillCheckRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TBillCheck extends TableImpl<TBillCheckRecord> {

    private static final long serialVersionUID = -1074356011;

    /**
     * The reference instance of <code>db_mall.t_bill_check</code>
     */
    public static final TBillCheck T_BILL_CHECK = new TBillCheck();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TBillCheckRecord> getRecordType() {
        return TBillCheckRecord.class;
    }

    /**
     * The column <code>db_mall.t_bill_check.id</code>.
     */
    public final TableField<TBillCheckRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>db_mall.t_bill_check.customer_id</code>.
     */
    public final TableField<TBillCheckRecord, Long> CUSTOMER_ID = createField("customer_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>db_mall.t_bill_check.phone</code>.
     */
    public final TableField<TBillCheckRecord, String> PHONE = createField("phone", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>db_mall.t_bill_check.month</code>.
     */
    public final TableField<TBillCheckRecord, String> MONTH = createField("month", org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>db_mall.t_bill_check.pay_type</code>.
     */
    public final TableField<TBillCheckRecord, Byte> PAY_TYPE = createField("pay_type", org.jooq.impl.SQLDataType.TINYINT, this, "");

    /**
     * The column <code>db_mall.t_bill_check.band_id</code>.
     */
    public final TableField<TBillCheckRecord, Integer> BAND_ID = createField("band_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>db_mall.t_bill_check.pay_status</code>. 支付状态
     */
    public final TableField<TBillCheckRecord, Byte> PAY_STATUS = createField("pay_status", org.jooq.impl.SQLDataType.TINYINT, this, "支付状态");

    /**
     * The column <code>db_mall.t_bill_check.is_expire</code>. 是否逾期
     */
    public final TableField<TBillCheckRecord, Byte> IS_EXPIRE = createField("is_expire", org.jooq.impl.SQLDataType.TINYINT, this, "是否逾期");

    /**
     * The column <code>db_mall.t_bill_check.timestamp</code>.
     */
    public final TableField<TBillCheckRecord, Long> TIMESTAMP = createField("timestamp", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>db_mall.t_bill_check.not_equal</code>.
     */
    public final TableField<TBillCheckRecord, Byte> NOT_EQUAL = createField("not_equal", org.jooq.impl.SQLDataType.TINYINT, this, "");

    /**
     * Create a <code>db_mall.t_bill_check</code> table reference
     */
    public TBillCheck() {
        this(DSL.name("t_bill_check"), null);
    }

    /**
     * Create an aliased <code>db_mall.t_bill_check</code> table reference
     */
    public TBillCheck(String alias) {
        this(DSL.name(alias), T_BILL_CHECK);
    }

    /**
     * Create an aliased <code>db_mall.t_bill_check</code> table reference
     */
    public TBillCheck(Name alias) {
        this(alias, T_BILL_CHECK);
    }

    private TBillCheck(Name alias, Table<TBillCheckRecord> aliased) {
        this(alias, aliased, null);
    }

    private TBillCheck(Name alias, Table<TBillCheckRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TBillCheck(Table<O> child, ForeignKey<O, TBillCheckRecord> key) {
        super(child, key, T_BILL_CHECK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbMall.DB_MALL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_BILL_CHECK_IND_CUSTOMER_MONTH_STAMP, Indexes.T_BILL_CHECK_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TBillCheckRecord, Integer> getIdentity() {
        return Keys.IDENTITY_T_BILL_CHECK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TBillCheckRecord> getPrimaryKey() {
        return Keys.KEY_T_BILL_CHECK_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TBillCheckRecord>> getKeys() {
        return Arrays.<UniqueKey<TBillCheckRecord>>asList(Keys.KEY_T_BILL_CHECK_PRIMARY, Keys.KEY_T_BILL_CHECK_IND_CUSTOMER_MONTH_STAMP);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TBillCheck as(String alias) {
        return new TBillCheck(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TBillCheck as(Name alias) {
        return new TBillCheck(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TBillCheck rename(String name) {
        return new TBillCheck(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TBillCheck rename(Name name) {
        return new TBillCheck(name, null);
    }
}
