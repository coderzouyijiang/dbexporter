/*
 * This file is generated by jOOQ.
 */
package cn.zyj.dbexporter.jooq.db_mall.tables;


import cn.zyj.dbexporter.jooq.db_mall.DbMall;
import cn.zyj.dbexporter.jooq.db_mall.Indexes;
import cn.zyj.dbexporter.jooq.db_mall.Keys;
import cn.zyj.dbexporter.jooq.db_mall.tables.records.TRiskCustomerInfoRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TRiskCustomerInfo extends TableImpl<TRiskCustomerInfoRecord> {

    private static final long serialVersionUID = -1536721534;

    /**
     * The reference instance of <code>db_mall.t_risk_customer_info</code>
     */
    public static final TRiskCustomerInfo T_RISK_CUSTOMER_INFO = new TRiskCustomerInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TRiskCustomerInfoRecord> getRecordType() {
        return TRiskCustomerInfoRecord.class;
    }

    /**
     * The column <code>db_mall.t_risk_customer_info.id</code>.
     */
    public final TableField<TRiskCustomerInfoRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>db_mall.t_risk_customer_info.customer_id</code>.
     */
    public final TableField<TRiskCustomerInfoRecord, Integer> CUSTOMER_ID = createField("customer_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>db_mall.t_risk_customer_info.true_name</code>.
     */
    public final TableField<TRiskCustomerInfoRecord, String> TRUE_NAME = createField("true_name", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>db_mall.t_risk_customer_info.card_no</code>.
     */
    public final TableField<TRiskCustomerInfoRecord, String> CARD_NO = createField("card_no", org.jooq.impl.SQLDataType.CHAR(18).nullable(false), this, "");

    /**
     * The column <code>db_mall.t_risk_customer_info.company_name</code>.
     */
    public final TableField<TRiskCustomerInfoRecord, String> COMPANY_NAME = createField("company_name", org.jooq.impl.SQLDataType.VARCHAR(300).nullable(false), this, "");

    /**
     * The column <code>db_mall.t_risk_customer_info.cdate</code>.
     */
    public final TableField<TRiskCustomerInfoRecord, Timestamp> CDATE = createField("cdate", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>db_mall.t_risk_customer_info.mdate</code>.
     */
    public final TableField<TRiskCustomerInfoRecord, Timestamp> MDATE = createField("mdate", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>db_mall.t_risk_customer_info</code> table reference
     */
    public TRiskCustomerInfo() {
        this(DSL.name("t_risk_customer_info"), null);
    }

    /**
     * Create an aliased <code>db_mall.t_risk_customer_info</code> table reference
     */
    public TRiskCustomerInfo(String alias) {
        this(DSL.name(alias), T_RISK_CUSTOMER_INFO);
    }

    /**
     * Create an aliased <code>db_mall.t_risk_customer_info</code> table reference
     */
    public TRiskCustomerInfo(Name alias) {
        this(alias, T_RISK_CUSTOMER_INFO);
    }

    private TRiskCustomerInfo(Name alias, Table<TRiskCustomerInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private TRiskCustomerInfo(Name alias, Table<TRiskCustomerInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TRiskCustomerInfo(Table<O> child, ForeignKey<O, TRiskCustomerInfoRecord> key) {
        super(child, key, T_RISK_CUSTOMER_INFO);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbMall.DB_MALL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_RISK_CUSTOMER_INFO_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TRiskCustomerInfoRecord, Integer> getIdentity() {
        return Keys.IDENTITY_T_RISK_CUSTOMER_INFO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TRiskCustomerInfoRecord> getPrimaryKey() {
        return Keys.KEY_T_RISK_CUSTOMER_INFO_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TRiskCustomerInfoRecord>> getKeys() {
        return Arrays.<UniqueKey<TRiskCustomerInfoRecord>>asList(Keys.KEY_T_RISK_CUSTOMER_INFO_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TRiskCustomerInfo as(String alias) {
        return new TRiskCustomerInfo(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TRiskCustomerInfo as(Name alias) {
        return new TRiskCustomerInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TRiskCustomerInfo rename(String name) {
        return new TRiskCustomerInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TRiskCustomerInfo rename(Name name) {
        return new TRiskCustomerInfo(name, null);
    }
}
