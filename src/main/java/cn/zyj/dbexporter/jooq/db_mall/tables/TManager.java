/*
 * This file is generated by jOOQ.
 */
package cn.zyj.dbexporter.jooq.db_mall.tables;


import cn.zyj.dbexporter.jooq.db_mall.DbMall;
import cn.zyj.dbexporter.jooq.db_mall.Indexes;
import cn.zyj.dbexporter.jooq.db_mall.Keys;
import cn.zyj.dbexporter.jooq.db_mall.tables.records.TManagerRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 管理员表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TManager extends TableImpl<TManagerRecord> {

    private static final long serialVersionUID = 246751699;

    /**
     * The reference instance of <code>db_mall.t_manager</code>
     */
    public static final TManager T_MANAGER = new TManager();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TManagerRecord> getRecordType() {
        return TManagerRecord.class;
    }

    /**
     * The column <code>db_mall.t_manager.id</code>. 管理员标识
     */
    public final TableField<TManagerRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "管理员标识");

    /**
     * The column <code>db_mall.t_manager.role_id</code>. 角色标识
     */
    public final TableField<TManagerRecord, Long> ROLE_ID = createField("role_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "角色标识");

    /**
     * The column <code>db_mall.t_manager.status</code>. 管理员状态(0:禁用;1:启用)
     */
    public final TableField<TManagerRecord, Byte> STATUS = createField("status", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "管理员状态(0:禁用;1:启用)");

    /**
     * The column <code>db_mall.t_manager.is_deleted</code>. 是否删除
     */
    public final TableField<TManagerRecord, Boolean> IS_DELETED = createField("is_deleted", org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("b'0'", org.jooq.impl.SQLDataType.BIT)), this, "是否删除");

    /**
     * The column <code>db_mall.t_manager.loginname</code>. 登录名称
     */
    public final TableField<TManagerRecord, String> LOGINNAME = createField("loginname", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "登录名称");

    /**
     * The column <code>db_mall.t_manager.password</code>. 登录密码
     */
    public final TableField<TManagerRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "登录密码");

    /**
     * The column <code>db_mall.t_manager.salt</code>. 密码加盐
     */
    public final TableField<TManagerRecord, String> SALT = createField("salt", org.jooq.impl.SQLDataType.VARCHAR(32), this, "密码加盐");

    /**
     * The column <code>db_mall.t_manager.truename</code>. 真实姓名
     */
    public final TableField<TManagerRecord, String> TRUENAME = createField("truename", org.jooq.impl.SQLDataType.VARCHAR(50), this, "真实姓名");

    /**
     * The column <code>db_mall.t_manager.phone</code>. 电话号码
     */
    public final TableField<TManagerRecord, String> PHONE = createField("phone", org.jooq.impl.SQLDataType.VARCHAR(11), this, "电话号码");

    /**
     * The column <code>db_mall.t_manager.last_login_time</code>. 最后登录时间
     */
    public final TableField<TManagerRecord, Timestamp> LAST_LOGIN_TIME = createField("last_login_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "最后登录时间");

    /**
     * The column <code>db_mall.t_manager.last_login_ip</code>. 最后登录地址
     */
    public final TableField<TManagerRecord, String> LAST_LOGIN_IP = createField("last_login_ip", org.jooq.impl.SQLDataType.VARCHAR(20), this, "最后登录地址");

    /**
     * The column <code>db_mall.t_manager.description</code>. 管理员描述
     */
    public final TableField<TManagerRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "管理员描述");

    /**
     * The column <code>db_mall.t_manager.created_time</code>. 创建时间
     */
    public final TableField<TManagerRecord, Timestamp> CREATED_TIME = createField("created_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>db_mall.t_manager.modified_time</code>. 修改时间
     */
    public final TableField<TManagerRecord, Timestamp> MODIFIED_TIME = createField("modified_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "修改时间");

    /**
     * Create a <code>db_mall.t_manager</code> table reference
     */
    public TManager() {
        this(DSL.name("t_manager"), null);
    }

    /**
     * Create an aliased <code>db_mall.t_manager</code> table reference
     */
    public TManager(String alias) {
        this(DSL.name(alias), T_MANAGER);
    }

    /**
     * Create an aliased <code>db_mall.t_manager</code> table reference
     */
    public TManager(Name alias) {
        this(alias, T_MANAGER);
    }

    private TManager(Name alias, Table<TManagerRecord> aliased) {
        this(alias, aliased, null);
    }

    private TManager(Name alias, Table<TManagerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("管理员表"));
    }

    public <O extends Record> TManager(Table<O> child, ForeignKey<O, TManagerRecord> key) {
        super(child, key, T_MANAGER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbMall.DB_MALL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_MANAGER_FK_MANAGER_ROLE_ID, Indexes.T_MANAGER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TManagerRecord> getPrimaryKey() {
        return Keys.KEY_T_MANAGER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TManagerRecord>> getKeys() {
        return Arrays.<UniqueKey<TManagerRecord>>asList(Keys.KEY_T_MANAGER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TManagerRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TManagerRecord, ?>>asList(Keys.T_MANAGER_IBFK_1);
    }

    public TRole tRole() {
        return new TRole(this, Keys.T_MANAGER_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TManager as(String alias) {
        return new TManager(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TManager as(Name alias) {
        return new TManager(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TManager rename(String name) {
        return new TManager(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TManager rename(Name name) {
        return new TManager(name, null);
    }
}
