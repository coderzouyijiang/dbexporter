/*
 * This file is generated by jOOQ.
 */
package cn.zyj.dbexporter.jooq.db_mall.tables;


import cn.zyj.dbexporter.jooq.db_mall.DbMall;
import cn.zyj.dbexporter.jooq.db_mall.Indexes;
import cn.zyj.dbexporter.jooq.db_mall.Keys;
import cn.zyj.dbexporter.jooq.db_mall.tables.records.TManagerFileRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 管理员文件表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TManagerFile extends TableImpl<TManagerFileRecord> {

    private static final long serialVersionUID = 773532882;

    /**
     * The reference instance of <code>db_mall.t_manager_file</code>
     */
    public static final TManagerFile T_MANAGER_FILE = new TManagerFile();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TManagerFileRecord> getRecordType() {
        return TManagerFileRecord.class;
    }

    /**
     * The column <code>db_mall.t_manager_file.id</code>. 文件标识
     */
    public final TableField<TManagerFileRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "文件标识");

    /**
     * The column <code>db_mall.t_manager_file.manager_id</code>. 管理员标识
     */
    public final TableField<TManagerFileRecord, Long> MANAGER_ID = createField("manager_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "管理员标识");

    /**
     * The column <code>db_mall.t_manager_file.status</code>. 文件状态(0:删除;1:正常)
     */
    public final TableField<TManagerFileRecord, Byte> STATUS = createField("status", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "文件状态(0:删除;1:正常)");

    /**
     * The column <code>db_mall.t_manager_file.name</code>. 文件名称
     */
    public final TableField<TManagerFileRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "文件名称");

    /**
     * The column <code>db_mall.t_manager_file.size</code>. 文件大小(字节)
     */
    public final TableField<TManagerFileRecord, Long> SIZE = createField("size", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "文件大小(字节)");

    /**
     * The column <code>db_mall.t_manager_file.suffix</code>. 文件后缀
     */
    public final TableField<TManagerFileRecord, String> SUFFIX = createField("suffix", org.jooq.impl.SQLDataType.VARCHAR(10), this, "文件后缀");

    /**
     * The column <code>db_mall.t_manager_file.created_time</code>. 创建时间
     */
    public final TableField<TManagerFileRecord, Timestamp> CREATED_TIME = createField("created_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * The column <code>db_mall.t_manager_file.modified_time</code>. 修改时间
     */
    public final TableField<TManagerFileRecord, Timestamp> MODIFIED_TIME = createField("modified_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "修改时间");

    /**
     * Create a <code>db_mall.t_manager_file</code> table reference
     */
    public TManagerFile() {
        this(DSL.name("t_manager_file"), null);
    }

    /**
     * Create an aliased <code>db_mall.t_manager_file</code> table reference
     */
    public TManagerFile(String alias) {
        this(DSL.name(alias), T_MANAGER_FILE);
    }

    /**
     * Create an aliased <code>db_mall.t_manager_file</code> table reference
     */
    public TManagerFile(Name alias) {
        this(alias, T_MANAGER_FILE);
    }

    private TManagerFile(Name alias, Table<TManagerFileRecord> aliased) {
        this(alias, aliased, null);
    }

    private TManagerFile(Name alias, Table<TManagerFileRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("管理员文件表"));
    }

    public <O extends Record> TManagerFile(Table<O> child, ForeignKey<O, TManagerFileRecord> key) {
        super(child, key, T_MANAGER_FILE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbMall.DB_MALL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_MANAGER_FILE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TManagerFileRecord> getPrimaryKey() {
        return Keys.KEY_T_MANAGER_FILE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TManagerFileRecord>> getKeys() {
        return Arrays.<UniqueKey<TManagerFileRecord>>asList(Keys.KEY_T_MANAGER_FILE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TManagerFile as(String alias) {
        return new TManagerFile(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TManagerFile as(Name alias) {
        return new TManagerFile(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TManagerFile rename(String name) {
        return new TManagerFile(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TManagerFile rename(Name name) {
        return new TManagerFile(name, null);
    }
}
