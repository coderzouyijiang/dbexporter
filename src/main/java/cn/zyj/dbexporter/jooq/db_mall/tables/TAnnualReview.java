/*
 * This file is generated by jOOQ.
 */
package cn.zyj.dbexporter.jooq.db_mall.tables;


import cn.zyj.dbexporter.jooq.db_mall.DbMall;
import cn.zyj.dbexporter.jooq.db_mall.Indexes;
import cn.zyj.dbexporter.jooq.db_mall.Keys;
import cn.zyj.dbexporter.jooq.db_mall.tables.records.TAnnualReviewRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 易点租2017年度数据查询记录
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TAnnualReview extends TableImpl<TAnnualReviewRecord> {

    private static final long serialVersionUID = -283912178;

    /**
     * The reference instance of <code>db_mall.t_annual_review</code>
     */
    public static final TAnnualReview T_ANNUAL_REVIEW = new TAnnualReview();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TAnnualReviewRecord> getRecordType() {
        return TAnnualReviewRecord.class;
    }

    /**
     * The column <code>db_mall.t_annual_review.id</code>.
     */
    public final TableField<TAnnualReviewRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>db_mall.t_annual_review.phone</code>. 手机号码
     */
    public final TableField<TAnnualReviewRecord, String> PHONE = createField("phone", org.jooq.impl.SQLDataType.CHAR(11), this, "手机号码");

    /**
     * The column <code>db_mall.t_annual_review.company_name</code>. 公司名称
     */
    public final TableField<TAnnualReviewRecord, String> COMPANY_NAME = createField("company_name", org.jooq.impl.SQLDataType.VARCHAR(300), this, "公司名称");

    /**
     * The column <code>db_mall.t_annual_review.customer_id</code>. 客户ID
     */
    public final TableField<TAnnualReviewRecord, Integer> CUSTOMER_ID = createField("customer_id", org.jooq.impl.SQLDataType.INTEGER, this, "客户ID");

    /**
     * The column <code>db_mall.t_annual_review.ip</code>. IP地址
     */
    public final TableField<TAnnualReviewRecord, String> IP = createField("ip", org.jooq.impl.SQLDataType.VARCHAR(20), this, "IP地址");

    /**
     * The column <code>db_mall.t_annual_review.cdate</code>.
     */
    public final TableField<TAnnualReviewRecord, Timestamp> CDATE = createField("cdate", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>db_mall.t_annual_review.mdate</code>.
     */
    public final TableField<TAnnualReviewRecord, Timestamp> MDATE = createField("mdate", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>db_mall.t_annual_review</code> table reference
     */
    public TAnnualReview() {
        this(DSL.name("t_annual_review"), null);
    }

    /**
     * Create an aliased <code>db_mall.t_annual_review</code> table reference
     */
    public TAnnualReview(String alias) {
        this(DSL.name(alias), T_ANNUAL_REVIEW);
    }

    /**
     * Create an aliased <code>db_mall.t_annual_review</code> table reference
     */
    public TAnnualReview(Name alias) {
        this(alias, T_ANNUAL_REVIEW);
    }

    private TAnnualReview(Name alias, Table<TAnnualReviewRecord> aliased) {
        this(alias, aliased, null);
    }

    private TAnnualReview(Name alias, Table<TAnnualReviewRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("易点租2017年度数据查询记录"));
    }

    public <O extends Record> TAnnualReview(Table<O> child, ForeignKey<O, TAnnualReviewRecord> key) {
        super(child, key, T_ANNUAL_REVIEW);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbMall.DB_MALL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_ANNUAL_REVIEW_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TAnnualReviewRecord, Integer> getIdentity() {
        return Keys.IDENTITY_T_ANNUAL_REVIEW;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TAnnualReviewRecord> getPrimaryKey() {
        return Keys.KEY_T_ANNUAL_REVIEW_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TAnnualReviewRecord>> getKeys() {
        return Arrays.<UniqueKey<TAnnualReviewRecord>>asList(Keys.KEY_T_ANNUAL_REVIEW_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TAnnualReview as(String alias) {
        return new TAnnualReview(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TAnnualReview as(Name alias) {
        return new TAnnualReview(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TAnnualReview rename(String name) {
        return new TAnnualReview(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TAnnualReview rename(Name name) {
        return new TAnnualReview(name, null);
    }
}
