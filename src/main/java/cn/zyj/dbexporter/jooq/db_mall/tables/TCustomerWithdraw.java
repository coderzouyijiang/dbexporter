/*
 * This file is generated by jOOQ.
 */
package cn.zyj.dbexporter.jooq.db_mall.tables;


import cn.zyj.dbexporter.jooq.db_mall.DbMall;
import cn.zyj.dbexporter.jooq.db_mall.Indexes;
import cn.zyj.dbexporter.jooq.db_mall.Keys;
import cn.zyj.dbexporter.jooq.db_mall.tables.records.TCustomerWithdrawRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TCustomerWithdraw extends TableImpl<TCustomerWithdrawRecord> {

    private static final long serialVersionUID = -1206374548;

    /**
     * The reference instance of <code>db_mall.t_customer_withdraw</code>
     */
    public static final TCustomerWithdraw T_CUSTOMER_WITHDRAW = new TCustomerWithdraw();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TCustomerWithdrawRecord> getRecordType() {
        return TCustomerWithdrawRecord.class;
    }

    /**
     * The column <code>db_mall.t_customer_withdraw.id</code>.
     */
    public final TableField<TCustomerWithdrawRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>db_mall.t_customer_withdraw.customer_id</code>.
     */
    public final TableField<TCustomerWithdrawRecord, Integer> CUSTOMER_ID = createField("customer_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>db_mall.t_customer_withdraw.amount</code>.
     */
    public final TableField<TCustomerWithdrawRecord, BigDecimal> AMOUNT = createField("amount", org.jooq.impl.SQLDataType.DECIMAL(10, 2).nullable(false).defaultValue(org.jooq.impl.DSL.inline("0.00", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>db_mall.t_customer_withdraw.ip</code>.
     */
    public final TableField<TCustomerWithdrawRecord, Long> IP = createField("ip", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>db_mall.t_customer_withdraw.user_agent</code>.
     */
    public final TableField<TCustomerWithdrawRecord, String> USER_AGENT = createField("user_agent", org.jooq.impl.SQLDataType.VARCHAR(300).nullable(false), this, "");

    /**
     * The column <code>db_mall.t_customer_withdraw.type_id</code>.
     */
    public final TableField<TCustomerWithdrawRecord, Byte> TYPE_ID = createField("type_id", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>db_mall.t_customer_withdraw.account</code>.
     */
    public final TableField<TCustomerWithdrawRecord, String> ACCOUNT = createField("account", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>db_mall.t_customer_withdraw.name</code>.
     */
    public final TableField<TCustomerWithdrawRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>db_mall.t_customer_withdraw.check_manager_id</code>.
     */
    public final TableField<TCustomerWithdrawRecord, Integer> CHECK_MANAGER_ID = createField("check_manager_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>db_mall.t_customer_withdraw.check_time</code>.
     */
    public final TableField<TCustomerWithdrawRecord, Timestamp> CHECK_TIME = createField("check_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>db_mall.t_customer_withdraw.status</code>.
     */
    public final TableField<TCustomerWithdrawRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>db_mall.t_customer_withdraw.remark</code>.
     */
    public final TableField<TCustomerWithdrawRecord, String> REMARK = createField("remark", org.jooq.impl.SQLDataType.VARCHAR(300), this, "");

    /**
     * The column <code>db_mall.t_customer_withdraw.cdate</code>.
     */
    public final TableField<TCustomerWithdrawRecord, Timestamp> CDATE = createField("cdate", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>db_mall.t_customer_withdraw.mdate</code>.
     */
    public final TableField<TCustomerWithdrawRecord, Timestamp> MDATE = createField("mdate", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>db_mall.t_customer_withdraw.pay_time</code>.
     */
    public final TableField<TCustomerWithdrawRecord, Timestamp> PAY_TIME = createField("pay_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>db_mall.t_customer_withdraw</code> table reference
     */
    public TCustomerWithdraw() {
        this(DSL.name("t_customer_withdraw"), null);
    }

    /**
     * Create an aliased <code>db_mall.t_customer_withdraw</code> table reference
     */
    public TCustomerWithdraw(String alias) {
        this(DSL.name(alias), T_CUSTOMER_WITHDRAW);
    }

    /**
     * Create an aliased <code>db_mall.t_customer_withdraw</code> table reference
     */
    public TCustomerWithdraw(Name alias) {
        this(alias, T_CUSTOMER_WITHDRAW);
    }

    private TCustomerWithdraw(Name alias, Table<TCustomerWithdrawRecord> aliased) {
        this(alias, aliased, null);
    }

    private TCustomerWithdraw(Name alias, Table<TCustomerWithdrawRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TCustomerWithdraw(Table<O> child, ForeignKey<O, TCustomerWithdrawRecord> key) {
        super(child, key, T_CUSTOMER_WITHDRAW);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbMall.DB_MALL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_CUSTOMER_WITHDRAW_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TCustomerWithdrawRecord, Long> getIdentity() {
        return Keys.IDENTITY_T_CUSTOMER_WITHDRAW;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TCustomerWithdrawRecord> getPrimaryKey() {
        return Keys.KEY_T_CUSTOMER_WITHDRAW_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TCustomerWithdrawRecord>> getKeys() {
        return Arrays.<UniqueKey<TCustomerWithdrawRecord>>asList(Keys.KEY_T_CUSTOMER_WITHDRAW_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TCustomerWithdraw as(String alias) {
        return new TCustomerWithdraw(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TCustomerWithdraw as(Name alias) {
        return new TCustomerWithdraw(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TCustomerWithdraw rename(String name) {
        return new TCustomerWithdraw(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TCustomerWithdraw rename(Name name) {
        return new TCustomerWithdraw(name, null);
    }
}
