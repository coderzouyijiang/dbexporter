/*
 * This file is generated by jOOQ.
 */
package cn.zyj.dbexporter.jooq.db_calculator.tables;


import cn.zyj.dbexporter.jooq.db_calculator.DbCalculator;
import cn.zyj.dbexporter.jooq.db_calculator.Indexes;
import cn.zyj.dbexporter.jooq.db_calculator.Keys;
import cn.zyj.dbexporter.jooq.db_calculator.tables.records.TCalculatorRecordRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 报价单操作记录
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TCalculatorRecord extends TableImpl<TCalculatorRecordRecord> {

    private static final long serialVersionUID = -1467385369;

    /**
     * The reference instance of <code>db_calculator.t_calculator_record</code>
     */
    public static final TCalculatorRecord T_CALCULATOR_RECORD = new TCalculatorRecord();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TCalculatorRecordRecord> getRecordType() {
        return TCalculatorRecordRecord.class;
    }

    /**
     * The column <code>db_calculator.t_calculator_record.id</code>.
     */
    public final TableField<TCalculatorRecordRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>db_calculator.t_calculator_record.origin_calculator_no</code>. 原报价单ID
     */
    public final TableField<TCalculatorRecordRecord, String> ORIGIN_CALCULATOR_NO = createField("origin_calculator_no", org.jooq.impl.SQLDataType.VARCHAR(300), this, "原报价单ID");

    /**
     * The column <code>db_calculator.t_calculator_record.new_calculator_no</code>. 新报价单ID
     */
    public final TableField<TCalculatorRecordRecord, String> NEW_CALCULATOR_NO = createField("new_calculator_no", org.jooq.impl.SQLDataType.VARCHAR(300), this, "新报价单ID");

    /**
     * The column <code>db_calculator.t_calculator_record.operate_type</code>. 操作类型
     */
    public final TableField<TCalculatorRecordRecord, Integer> OPERATE_TYPE = createField("operate_type", org.jooq.impl.SQLDataType.INTEGER, this, "操作类型");

    /**
     * The column <code>db_calculator.t_calculator_record.remark</code>.
     */
    public final TableField<TCalculatorRecordRecord, String> REMARK = createField("remark", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>db_calculator.t_calculator_record.operator_id</code>. 操作人
     */
    public final TableField<TCalculatorRecordRecord, Integer> OPERATOR_ID = createField("operator_id", org.jooq.impl.SQLDataType.INTEGER, this, "操作人");

    /**
     * The column <code>db_calculator.t_calculator_record.operator_name</code>. 操作人姓名
     */
    public final TableField<TCalculatorRecordRecord, String> OPERATOR_NAME = createField("operator_name", org.jooq.impl.SQLDataType.VARCHAR(30), this, "操作人姓名");

    /**
     * The column <code>db_calculator.t_calculator_record.cdate</code>.
     */
    public final TableField<TCalculatorRecordRecord, Timestamp> CDATE = createField("cdate", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>db_calculator.t_calculator_record.mdate</code>.
     */
    public final TableField<TCalculatorRecordRecord, Timestamp> MDATE = createField("mdate", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>db_calculator.t_calculator_record</code> table reference
     */
    public TCalculatorRecord() {
        this(DSL.name("t_calculator_record"), null);
    }

    /**
     * Create an aliased <code>db_calculator.t_calculator_record</code> table reference
     */
    public TCalculatorRecord(String alias) {
        this(DSL.name(alias), T_CALCULATOR_RECORD);
    }

    /**
     * Create an aliased <code>db_calculator.t_calculator_record</code> table reference
     */
    public TCalculatorRecord(Name alias) {
        this(alias, T_CALCULATOR_RECORD);
    }

    private TCalculatorRecord(Name alias, Table<TCalculatorRecordRecord> aliased) {
        this(alias, aliased, null);
    }

    private TCalculatorRecord(Name alias, Table<TCalculatorRecordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("报价单操作记录"));
    }

    public <O extends Record> TCalculatorRecord(Table<O> child, ForeignKey<O, TCalculatorRecordRecord> key) {
        super(child, key, T_CALCULATOR_RECORD);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbCalculator.DB_CALCULATOR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_CALCULATOR_RECORD_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TCalculatorRecordRecord, Integer> getIdentity() {
        return Keys.IDENTITY_T_CALCULATOR_RECORD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TCalculatorRecordRecord> getPrimaryKey() {
        return Keys.KEY_T_CALCULATOR_RECORD_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TCalculatorRecordRecord>> getKeys() {
        return Arrays.<UniqueKey<TCalculatorRecordRecord>>asList(Keys.KEY_T_CALCULATOR_RECORD_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TCalculatorRecord as(String alias) {
        return new TCalculatorRecord(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TCalculatorRecord as(Name alias) {
        return new TCalculatorRecord(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TCalculatorRecord rename(String name) {
        return new TCalculatorRecord(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TCalculatorRecord rename(Name name) {
        return new TCalculatorRecord(name, null);
    }
}
