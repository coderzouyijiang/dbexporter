/*
 * This file is generated by jOOQ.
 */
package cn.zyj.dbexporter.jooq.db_calculator.tables;


import cn.zyj.dbexporter.jooq.db_calculator.DbCalculator;
import cn.zyj.dbexporter.jooq.db_calculator.Indexes;
import cn.zyj.dbexporter.jooq.db_calculator.Keys;
import cn.zyj.dbexporter.jooq.db_calculator.tables.records.TCalculatorRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 计算器报价单
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TCalculator extends TableImpl<TCalculatorRecord> {

    private static final long serialVersionUID = 576625404;

    /**
     * The reference instance of <code>db_calculator.t_calculator</code>
     */
    public static final TCalculator T_CALCULATOR = new TCalculator();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TCalculatorRecord> getRecordType() {
        return TCalculatorRecord.class;
    }

    /**
     * The column <code>db_calculator.t_calculator.id</code>.
     */
    public final TableField<TCalculatorRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>db_calculator.t_calculator.sheet_no</code>. 报价单号
     */
    public final TableField<TCalculatorRecord, String> SHEET_NO = createField("sheet_no", org.jooq.impl.SQLDataType.VARCHAR(50), this, "报价单号");

    /**
     * The column <code>db_calculator.t_calculator.serial_no</code>. 流水号(历史单据有)
     */
    public final TableField<TCalculatorRecord, String> SERIAL_NO = createField("serial_no", org.jooq.impl.SQLDataType.VARCHAR(50), this, "流水号(历史单据有)");

    /**
     * The column <code>db_calculator.t_calculator.product_type</code>. 产品类型
     */
    public final TableField<TCalculatorRecord, Integer> PRODUCT_TYPE = createField("product_type", org.jooq.impl.SQLDataType.INTEGER, this, "产品类型");

    /**
     * The column <code>db_calculator.t_calculator.quality</code>. 成色
     */
    public final TableField<TCalculatorRecord, Integer> QUALITY = createField("quality", org.jooq.impl.SQLDataType.INTEGER, this, "成色");

    /**
     * The column <code>db_calculator.t_calculator.brand</code>. 品牌
     */
    public final TableField<TCalculatorRecord, Integer> BRAND = createField("brand", org.jooq.impl.SQLDataType.INTEGER, this, "品牌");

    /**
     * The column <code>db_calculator.t_calculator.model</code>. 型号
     */
    public final TableField<TCalculatorRecord, String> MODEL = createField("model", org.jooq.impl.SQLDataType.VARCHAR(200), this, "型号");

    /**
     * The column <code>db_calculator.t_calculator.service_standard</code>. 服务标准
     */
    public final TableField<TCalculatorRecord, Integer> SERVICE_STANDARD = createField("service_standard", org.jooq.impl.SQLDataType.INTEGER, this, "服务标准");

    /**
     * The column <code>db_calculator.t_calculator.os</code>. 操作系统
     */
    public final TableField<TCalculatorRecord, Integer> OS = createField("os", org.jooq.impl.SQLDataType.INTEGER, this, "操作系统");

    /**
     * The column <code>db_calculator.t_calculator.core_config</code>. 核心配置
     */
    public final TableField<TCalculatorRecord, String> CORE_CONFIG = createField("core_config", org.jooq.impl.SQLDataType.VARCHAR(500), this, "核心配置");

    /**
     * The column <code>db_calculator.t_calculator.uncore_config</code>. 非核心配置
     */
    public final TableField<TCalculatorRecord, String> UNCORE_CONFIG = createField("uncore_config", org.jooq.impl.SQLDataType.VARCHAR(500), this, "非核心配置");

    /**
     * The column <code>db_calculator.t_calculator.purchase_price</code>. 采购价格
     */
    public final TableField<TCalculatorRecord, BigDecimal> PURCHASE_PRICE = createField("purchase_price", org.jooq.impl.SQLDataType.DECIMAL(10, 2), this, "采购价格");

    /**
     * The column <code>db_calculator.t_calculator.offer_validity</code>. 报价有效期
     */
    public final TableField<TCalculatorRecord, Integer> OFFER_VALIDITY = createField("offer_validity", org.jooq.impl.SQLDataType.INTEGER, this, "报价有效期");

    /**
     * The column <code>db_calculator.t_calculator.residual_after_year1</code>. 1年后处置价
     */
    public final TableField<TCalculatorRecord, BigDecimal> RESIDUAL_AFTER_YEAR1 = createField("residual_after_year1", org.jooq.impl.SQLDataType.DECIMAL(10, 2), this, "1年后处置价");

    /**
     * The column <code>db_calculator.t_calculator.residual_after_year2</code>. 2年后处置价
     */
    public final TableField<TCalculatorRecord, BigDecimal> RESIDUAL_AFTER_YEAR2 = createField("residual_after_year2", org.jooq.impl.SQLDataType.DECIMAL(10, 2), this, "2年后处置价");

    /**
     * The column <code>db_calculator.t_calculator.residual_after_year3</code>. 3年后处置价
     */
    public final TableField<TCalculatorRecord, BigDecimal> RESIDUAL_AFTER_YEAR3 = createField("residual_after_year3", org.jooq.impl.SQLDataType.DECIMAL(10, 2), this, "3年后处置价");

    /**
     * The column <code>db_calculator.t_calculator.residual_after_year4</code>. 4年后处置价
     */
    public final TableField<TCalculatorRecord, BigDecimal> RESIDUAL_AFTER_YEAR4 = createField("residual_after_year4", org.jooq.impl.SQLDataType.DECIMAL(10, 2), this, "4年后处置价");

    /**
     * The column <code>db_calculator.t_calculator.residual_after_year5</code>. 5年后处置价
     */
    public final TableField<TCalculatorRecord, BigDecimal> RESIDUAL_AFTER_YEAR5 = createField("residual_after_year5", org.jooq.impl.SQLDataType.DECIMAL(10, 2), this, "5年后处置价");

    /**
     * The column <code>db_calculator.t_calculator.is_special_invoice</code>. 进项是否增值税专用发票
     */
    public final TableField<TCalculatorRecord, Integer> IS_SPECIAL_INVOICE = createField("is_special_invoice", org.jooq.impl.SQLDataType.INTEGER, this, "进项是否增值税专用发票");

    /**
     * The column <code>db_calculator.t_calculator.logistic_cost</code>. 物流费用
     */
    public final TableField<TCalculatorRecord, BigDecimal> LOGISTIC_COST = createField("logistic_cost", org.jooq.impl.SQLDataType.DECIMAL(10, 2), this, "物流费用");

    /**
     * The column <code>db_calculator.t_calculator.recovery_cost</code>. 整修费用
     */
    public final TableField<TCalculatorRecord, BigDecimal> RECOVERY_COST = createField("recovery_cost", org.jooq.impl.SQLDataType.DECIMAL(10, 2), this, "整修费用");

    /**
     * The column <code>db_calculator.t_calculator.monthly_maintainace_cost</code>. 出保后月保修费用
     */
    public final TableField<TCalculatorRecord, BigDecimal> MONTHLY_MAINTAINACE_COST = createField("monthly_maintainace_cost", org.jooq.impl.SQLDataType.DECIMAL(10, 2), this, "出保后月保修费用");

    /**
     * The column <code>db_calculator.t_calculator.free_warranty_year</code>. 采购价含保修年限
     */
    public final TableField<TCalculatorRecord, Integer> FREE_WARRANTY_YEAR = createField("free_warranty_year", org.jooq.impl.SQLDataType.INTEGER, this, "采购价含保修年限");

    /**
     * The column <code>db_calculator.t_calculator.interest_rate</code>. 资金年化利率
     */
    public final TableField<TCalculatorRecord, BigDecimal> INTEREST_RATE = createField("interest_rate", org.jooq.impl.SQLDataType.DECIMAL(10, 2), this, "资金年化利率");

    /**
     * The column <code>db_calculator.t_calculator.risk_rate_normal</code>. 风险准备金率(标准)
     */
    public final TableField<TCalculatorRecord, BigDecimal> RISK_RATE_NORMAL = createField("risk_rate_normal", org.jooq.impl.SQLDataType.DECIMAL(10, 2), this, "风险准备金率(标准)");

    /**
     * The column <code>db_calculator.t_calculator.risk_rate_low</code>. 风险准备金率(低)
     */
    public final TableField<TCalculatorRecord, BigDecimal> RISK_RATE_LOW = createField("risk_rate_low", org.jooq.impl.SQLDataType.DECIMAL(10, 2), this, "风险准备金率(低)");

    /**
     * The column <code>db_calculator.t_calculator.goal_rate_normal</code>. 目标回报率(标准)
     */
    public final TableField<TCalculatorRecord, BigDecimal> GOAL_RATE_NORMAL = createField("goal_rate_normal", org.jooq.impl.SQLDataType.DECIMAL(10, 2), this, "目标回报率(标准)");

    /**
     * The column <code>db_calculator.t_calculator.goal_rate_low</code>. 目标回报率(低)
     */
    public final TableField<TCalculatorRecord, BigDecimal> GOAL_RATE_LOW = createField("goal_rate_low", org.jooq.impl.SQLDataType.DECIMAL(10, 2), this, "目标回报率(低)");

    /**
     * The column <code>db_calculator.t_calculator.normal_return_rate</code>. 标准回报率
     */
    public final TableField<TCalculatorRecord, String> NORMAL_RETURN_RATE = createField("normal_return_rate", org.jooq.impl.SQLDataType.CLOB, this, "标准回报率");

    /**
     * The column <code>db_calculator.t_calculator.low_return_rate</code>. 低回报率
     */
    public final TableField<TCalculatorRecord, String> LOW_RETURN_RATE = createField("low_return_rate", org.jooq.impl.SQLDataType.CLOB, this, "低回报率");

    /**
     * The column <code>db_calculator.t_calculator.calculation_result</code>. 计算结果
     */
    public final TableField<TCalculatorRecord, String> CALCULATION_RESULT = createField("calculation_result", org.jooq.impl.SQLDataType.CLOB, this, "计算结果");

    /**
     * The column <code>db_calculator.t_calculator.is_history</code>. 是否历史数据 0:否 1:是
     */
    public final TableField<TCalculatorRecord, Integer> IS_HISTORY = createField("is_history", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "是否历史数据 0:否 1:是");

    /**
     * The column <code>db_calculator.t_calculator.is_valid</code>. 是否有效 0:否 1:是
     */
    public final TableField<TCalculatorRecord, Integer> IS_VALID = createField("is_valid", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.INTEGER)), this, "是否有效 0:否 1:是");

    /**
     * The column <code>db_calculator.t_calculator.cdate</code>.
     */
    public final TableField<TCalculatorRecord, Timestamp> CDATE = createField("cdate", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>db_calculator.t_calculator.mdate</code>.
     */
    public final TableField<TCalculatorRecord, Timestamp> MDATE = createField("mdate", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>db_calculator.t_calculator.creater_id</code>. 创建人ID
     */
    public final TableField<TCalculatorRecord, Integer> CREATER_ID = createField("creater_id", org.jooq.impl.SQLDataType.INTEGER, this, "创建人ID");

    /**
     * The column <code>db_calculator.t_calculator.creater_name</code>. 创建人姓名
     */
    public final TableField<TCalculatorRecord, String> CREATER_NAME = createField("creater_name", org.jooq.impl.SQLDataType.VARCHAR(20), this, "创建人姓名");

    /**
     * The column <code>db_calculator.t_calculator.data_status</code>. 状态 0:正常 -1:删除
     */
    public final TableField<TCalculatorRecord, Integer> DATA_STATUS = createField("data_status", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "状态 0:正常 -1:删除");

    /**
     * The column <code>db_calculator.t_calculator.ram</code>. ram
     */
    public final TableField<TCalculatorRecord, Integer> RAM = createField("ram", org.jooq.impl.SQLDataType.INTEGER, this, "ram");

    /**
     * The column <code>db_calculator.t_calculator.hd1</code>. hd1
     */
    public final TableField<TCalculatorRecord, Integer> HD1 = createField("hd1", org.jooq.impl.SQLDataType.INTEGER, this, "hd1");

    /**
     * The column <code>db_calculator.t_calculator.hd2</code>. hd2
     */
    public final TableField<TCalculatorRecord, Integer> HD2 = createField("hd2", org.jooq.impl.SQLDataType.INTEGER, this, "hd2");

    /**
     * The column <code>db_calculator.t_calculator.gpu</code>. GPU
     */
    public final TableField<TCalculatorRecord, Integer> GPU = createField("gpu", org.jooq.impl.SQLDataType.INTEGER, this, "GPU");

    /**
     * The column <code>db_calculator.t_calculator.screen_size</code>. 屏幕尺寸
     */
    public final TableField<TCalculatorRecord, Integer> SCREEN_SIZE = createField("screen_size", org.jooq.impl.SQLDataType.INTEGER, this, "屏幕尺寸");

    /**
     * The column <code>db_calculator.t_calculator.resolution</code>. 分辨率
     */
    public final TableField<TCalculatorRecord, Integer> RESOLUTION = createField("resolution", org.jooq.impl.SQLDataType.INTEGER, this, "分辨率");

    /**
     * The column <code>db_calculator.t_calculator.deposit</code>. 押金
     */
    public final TableField<TCalculatorRecord, BigDecimal> DEPOSIT = createField("deposit", org.jooq.impl.SQLDataType.DECIMAL(10, 2), this, "押金");

    /**
     * The column <code>db_calculator.t_calculator.sku</code>. sku
     */
    public final TableField<TCalculatorRecord, String> SKU = createField("sku", org.jooq.impl.SQLDataType.VARCHAR(300), this, "sku");

    /**
     * The column <code>db_calculator.t_calculator.rent_or_sale</code>. 租售属性：1-租（默认），2-售 ，3-租售均可
     */
    public final TableField<TCalculatorRecord, Byte> RENT_OR_SALE = createField("rent_or_sale", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.TINYINT)), this, "租售属性：1-租（默认），2-售 ，3-租售均可");

    /**
     * The column <code>db_calculator.t_calculator.sku_rent_or_sale</code>. 资源的租售属性，如果和rent_or_sale不一样，说明报价单待更新
     */
    public final TableField<TCalculatorRecord, Byte> SKU_RENT_OR_SALE = createField("sku_rent_or_sale", org.jooq.impl.SQLDataType.TINYINT, this, "资源的租售属性，如果和rent_or_sale不一样，说明报价单待更新");

    /**
     * The column <code>db_calculator.t_calculator.transport_cost</code>. 物流成本
     */
    public final TableField<TCalculatorRecord, BigDecimal> TRANSPORT_COST = createField("transport_cost", org.jooq.impl.SQLDataType.DECIMAL(10, 2), this, "物流成本");

    /**
     * The column <code>db_calculator.t_calculator.profit_start_counting</code>. 利润起算点
     */
    public final TableField<TCalculatorRecord, BigDecimal> PROFIT_START_COUNTING = createField("profit_start_counting", org.jooq.impl.SQLDataType.DECIMAL(10, 2), this, "利润起算点");

    /**
     * The column <code>db_calculator.t_calculator.gross_interest_rate</code>. 毛利率
     */
    public final TableField<TCalculatorRecord, BigDecimal> GROSS_INTEREST_RATE = createField("gross_interest_rate", org.jooq.impl.SQLDataType.DECIMAL(5, 4), this, "毛利率");

    /**
     * The column <code>db_calculator.t_calculator.min_sale_price</code>. 销售底价
     */
    public final TableField<TCalculatorRecord, BigDecimal> MIN_SALE_PRICE = createField("min_sale_price", org.jooq.impl.SQLDataType.DECIMAL(10, 2), this, "销售底价");

    /**
     * The column <code>db_calculator.t_calculator.real_sale_price</code>. 易企购售价
     */
    public final TableField<TCalculatorRecord, BigDecimal> REAL_SALE_PRICE = createField("real_sale_price", org.jooq.impl.SQLDataType.DECIMAL(10, 2), this, "易企购售价");

    /**
     * The column <code>db_calculator.t_calculator.cpu_type</code>. cpu类型
     */
    public final TableField<TCalculatorRecord, Integer> CPU_TYPE = createField("cpu_type", org.jooq.impl.SQLDataType.INTEGER, this, "cpu类型");

    /**
     * The column <code>db_calculator.t_calculator.cpu_model</code>. cpu型号
     */
    public final TableField<TCalculatorRecord, Integer> CPU_MODEL = createField("cpu_model", org.jooq.impl.SQLDataType.INTEGER, this, "cpu型号");

    /**
     * The column <code>db_calculator.t_calculator.resource_type</code>. 产品池类型
     */
    public final TableField<TCalculatorRecord, Integer> RESOURCE_TYPE = createField("resource_type", org.jooq.impl.SQLDataType.INTEGER, this, "产品池类型");

    /**
     * Create a <code>db_calculator.t_calculator</code> table reference
     */
    public TCalculator() {
        this(DSL.name("t_calculator"), null);
    }

    /**
     * Create an aliased <code>db_calculator.t_calculator</code> table reference
     */
    public TCalculator(String alias) {
        this(DSL.name(alias), T_CALCULATOR);
    }

    /**
     * Create an aliased <code>db_calculator.t_calculator</code> table reference
     */
    public TCalculator(Name alias) {
        this(alias, T_CALCULATOR);
    }

    private TCalculator(Name alias, Table<TCalculatorRecord> aliased) {
        this(alias, aliased, null);
    }

    private TCalculator(Name alias, Table<TCalculatorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("计算器报价单"));
    }

    public <O extends Record> TCalculator(Table<O> child, ForeignKey<O, TCalculatorRecord> key) {
        super(child, key, T_CALCULATOR);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbCalculator.DB_CALCULATOR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_CALCULATOR_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TCalculatorRecord, Integer> getIdentity() {
        return Keys.IDENTITY_T_CALCULATOR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TCalculatorRecord> getPrimaryKey() {
        return Keys.KEY_T_CALCULATOR_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TCalculatorRecord>> getKeys() {
        return Arrays.<UniqueKey<TCalculatorRecord>>asList(Keys.KEY_T_CALCULATOR_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TCalculator as(String alias) {
        return new TCalculator(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TCalculator as(Name alias) {
        return new TCalculator(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TCalculator rename(String name) {
        return new TCalculator(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TCalculator rename(Name name) {
        return new TCalculator(name, null);
    }
}
