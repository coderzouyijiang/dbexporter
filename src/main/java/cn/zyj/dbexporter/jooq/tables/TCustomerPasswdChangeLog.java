/*
 * This file is generated by jOOQ.
 */
package cn.zyj.dbexporter.jooq.tables;


import cn.zyj.dbexporter.jooq.DbMall;
import cn.zyj.dbexporter.jooq.Indexes;
import cn.zyj.dbexporter.jooq.Keys;
import cn.zyj.dbexporter.jooq.tables.records.TCustomerPasswdChangeLogRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TCustomerPasswdChangeLog extends TableImpl<TCustomerPasswdChangeLogRecord> {

    private static final long serialVersionUID = 1098504158;

    /**
     * The reference instance of <code>db_mall.t_customer_passwd_change_log</code>
     */
    public static final TCustomerPasswdChangeLog T_CUSTOMER_PASSWD_CHANGE_LOG = new TCustomerPasswdChangeLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TCustomerPasswdChangeLogRecord> getRecordType() {
        return TCustomerPasswdChangeLogRecord.class;
    }

    /**
     * The column <code>db_mall.t_customer_passwd_change_log.id</code>.
     */
    public final TableField<TCustomerPasswdChangeLogRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>db_mall.t_customer_passwd_change_log.customer_id</code>.
     */
    public final TableField<TCustomerPasswdChangeLogRecord, Integer> CUSTOMER_ID = createField("customer_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>db_mall.t_customer_passwd_change_log.type_id</code>.
     */
    public final TableField<TCustomerPasswdChangeLogRecord, Byte> TYPE_ID = createField("type_id", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>db_mall.t_customer_passwd_change_log.ip</code>.
     */
    public final TableField<TCustomerPasswdChangeLogRecord, Long> IP = createField("ip", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>db_mall.t_customer_passwd_change_log.user_agent</code>.
     */
    public final TableField<TCustomerPasswdChangeLogRecord, String> USER_AGENT = createField("user_agent", org.jooq.impl.SQLDataType.VARCHAR(300).nullable(false), this, "");

    /**
     * The column <code>db_mall.t_customer_passwd_change_log.cdate</code>.
     */
    public final TableField<TCustomerPasswdChangeLogRecord, Timestamp> CDATE = createField("cdate", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>db_mall.t_customer_passwd_change_log.mdate</code>.
     */
    public final TableField<TCustomerPasswdChangeLogRecord, Timestamp> MDATE = createField("mdate", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>db_mall.t_customer_passwd_change_log</code> table reference
     */
    public TCustomerPasswdChangeLog() {
        this(DSL.name("t_customer_passwd_change_log"), null);
    }

    /**
     * Create an aliased <code>db_mall.t_customer_passwd_change_log</code> table reference
     */
    public TCustomerPasswdChangeLog(String alias) {
        this(DSL.name(alias), T_CUSTOMER_PASSWD_CHANGE_LOG);
    }

    /**
     * Create an aliased <code>db_mall.t_customer_passwd_change_log</code> table reference
     */
    public TCustomerPasswdChangeLog(Name alias) {
        this(alias, T_CUSTOMER_PASSWD_CHANGE_LOG);
    }

    private TCustomerPasswdChangeLog(Name alias, Table<TCustomerPasswdChangeLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private TCustomerPasswdChangeLog(Name alias, Table<TCustomerPasswdChangeLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TCustomerPasswdChangeLog(Table<O> child, ForeignKey<O, TCustomerPasswdChangeLogRecord> key) {
        super(child, key, T_CUSTOMER_PASSWD_CHANGE_LOG);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbMall.DB_MALL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_CUSTOMER_PASSWD_CHANGE_LOG_C_T, Indexes.T_CUSTOMER_PASSWD_CHANGE_LOG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TCustomerPasswdChangeLogRecord, Integer> getIdentity() {
        return Keys.IDENTITY_T_CUSTOMER_PASSWD_CHANGE_LOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TCustomerPasswdChangeLogRecord> getPrimaryKey() {
        return Keys.KEY_T_CUSTOMER_PASSWD_CHANGE_LOG_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TCustomerPasswdChangeLogRecord>> getKeys() {
        return Arrays.<UniqueKey<TCustomerPasswdChangeLogRecord>>asList(Keys.KEY_T_CUSTOMER_PASSWD_CHANGE_LOG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TCustomerPasswdChangeLog as(String alias) {
        return new TCustomerPasswdChangeLog(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TCustomerPasswdChangeLog as(Name alias) {
        return new TCustomerPasswdChangeLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TCustomerPasswdChangeLog rename(String name) {
        return new TCustomerPasswdChangeLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TCustomerPasswdChangeLog rename(Name name) {
        return new TCustomerPasswdChangeLog(name, null);
    }
}
