/*
 * This file is generated by jOOQ.
 */
package cn.zyj.dbexporter.jooq.tables;


import cn.zyj.dbexporter.jooq.DbMall;
import cn.zyj.dbexporter.jooq.Indexes;
import cn.zyj.dbexporter.jooq.Keys;
import cn.zyj.dbexporter.jooq.tables.records.TManagerLogRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 管理员日志表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TManagerLog extends TableImpl<TManagerLogRecord> {

    private static final long serialVersionUID = 1243111714;

    /**
     * The reference instance of <code>db_mall.t_manager_log</code>
     */
    public static final TManagerLog T_MANAGER_LOG = new TManagerLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TManagerLogRecord> getRecordType() {
        return TManagerLogRecord.class;
    }

    /**
     * The column <code>db_mall.t_manager_log.id</code>. 日志标识
     */
    public final TableField<TManagerLogRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "日志标识");

    /**
     * The column <code>db_mall.t_manager_log.manager_id</code>. 管理员标识
     */
    public final TableField<TManagerLogRecord, Long> MANAGER_ID = createField("manager_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "管理员标识");

    /**
     * The column <code>db_mall.t_manager_log.operator_id</code>. 操作员标识
     */
    public final TableField<TManagerLogRecord, Long> OPERATOR_ID = createField("operator_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "操作员标识");

    /**
     * The column <code>db_mall.t_manager_log.type</code>. 日志类型(1:创建;2:登录;3:登出;4:修改;5:删除;6:恢复)
     */
    public final TableField<TManagerLogRecord, Byte> TYPE = createField("type", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "日志类型(1:创建;2:登录;3:登出;4:修改;5:删除;6:恢复)");

    /**
     * The column <code>db_mall.t_manager_log.content</code>. 日志内容
     */
    public final TableField<TManagerLogRecord, String> CONTENT = createField("content", org.jooq.impl.SQLDataType.CLOB, this, "日志内容");

    /**
     * The column <code>db_mall.t_manager_log.created_time</code>. 创建时间
     */
    public final TableField<TManagerLogRecord, Timestamp> CREATED_TIME = createField("created_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "创建时间");

    /**
     * Create a <code>db_mall.t_manager_log</code> table reference
     */
    public TManagerLog() {
        this(DSL.name("t_manager_log"), null);
    }

    /**
     * Create an aliased <code>db_mall.t_manager_log</code> table reference
     */
    public TManagerLog(String alias) {
        this(DSL.name(alias), T_MANAGER_LOG);
    }

    /**
     * Create an aliased <code>db_mall.t_manager_log</code> table reference
     */
    public TManagerLog(Name alias) {
        this(alias, T_MANAGER_LOG);
    }

    private TManagerLog(Name alias, Table<TManagerLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private TManagerLog(Name alias, Table<TManagerLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("管理员日志表"));
    }

    public <O extends Record> TManagerLog(Table<O> child, ForeignKey<O, TManagerLogRecord> key) {
        super(child, key, T_MANAGER_LOG);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbMall.DB_MALL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_MANAGER_LOG_FK_MALOG_MANAGER_ID, Indexes.T_MANAGER_LOG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TManagerLogRecord> getPrimaryKey() {
        return Keys.KEY_T_MANAGER_LOG_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TManagerLogRecord>> getKeys() {
        return Arrays.<UniqueKey<TManagerLogRecord>>asList(Keys.KEY_T_MANAGER_LOG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TManagerLogRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TManagerLogRecord, ?>>asList(Keys.T_MANAGER_LOG_IBFK_1);
    }

    public TManager tManager() {
        return new TManager(this, Keys.T_MANAGER_LOG_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TManagerLog as(String alias) {
        return new TManagerLog(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TManagerLog as(Name alias) {
        return new TManagerLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TManagerLog rename(String name) {
        return new TManagerLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TManagerLog rename(Name name) {
        return new TManagerLog(name, null);
    }
}
