/*
 * This file is generated by jOOQ.
 */
package cn.zyj.dbexporter.jooq.tables;


import cn.zyj.dbexporter.jooq.DbMall;
import cn.zyj.dbexporter.jooq.Indexes;
import cn.zyj.dbexporter.jooq.Keys;
import cn.zyj.dbexporter.jooq.tables.records.TicketsRecord;

import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tickets extends TableImpl<TicketsRecord> {

    private static final long serialVersionUID = 507981950;

    /**
     * The reference instance of <code>db_mall.tickets</code>
     */
    public static final Tickets TICKETS = new Tickets();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TicketsRecord> getRecordType() {
        return TicketsRecord.class;
    }

    /**
     * The column <code>db_mall.tickets.id</code>.
     */
    public final TableField<TicketsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>db_mall.tickets.ticketid</code>.
     */
    public final TableField<TicketsRecord, String> TICKETID = createField("ticketid", org.jooq.impl.SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>db_mall.tickets.orderid</code>.
     */
    public final TableField<TicketsRecord, String> ORDERID = createField("orderid", org.jooq.impl.SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>db_mall.tickets.oid</code>.
     */
    public final TableField<TicketsRecord, Integer> OID = createField("oid", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>db_mall.tickets.type</code>.
     */
    public final TableField<TicketsRecord, Byte> TYPE = createField("type", org.jooq.impl.SQLDataType.TINYINT, this, "");

    /**
     * The column <code>db_mall.tickets.amounts</code>.
     */
    public final TableField<TicketsRecord, BigDecimal> AMOUNTS = createField("amounts", org.jooq.impl.SQLDataType.DECIMAL(12, 2), this, "");

    /**
     * The column <code>db_mall.tickets.payed</code>.
     */
    public final TableField<TicketsRecord, Boolean> PAYED = createField("payed", org.jooq.impl.SQLDataType.BIT.defaultValue(org.jooq.impl.DSL.inline("b'0'", org.jooq.impl.SQLDataType.BIT)), this, "");

    /**
     * The column <code>db_mall.tickets.actiontime</code>.
     */
    public final TableField<TicketsRecord, Timestamp> ACTIONTIME = createField("actiontime", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>db_mall.tickets.oper</code>.
     */
    public final TableField<TicketsRecord, Byte> OPER = createField("oper", org.jooq.impl.SQLDataType.TINYINT, this, "");

    /**
     * The column <code>db_mall.tickets.operid</code>.
     */
    public final TableField<TicketsRecord, Integer> OPERID = createField("operid", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>db_mall.tickets.payment</code>.
     */
    public final TableField<TicketsRecord, Byte> PAYMENT = createField("payment", org.jooq.impl.SQLDataType.TINYINT, this, "");

    /**
     * The column <code>db_mall.tickets.note</code>.
     */
    public final TableField<TicketsRecord, String> NOTE = createField("note", org.jooq.impl.SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>db_mall.tickets.opername</code>.
     */
    public final TableField<TicketsRecord, String> OPERNAME = createField("opername", org.jooq.impl.SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>db_mall.tickets.month</code>.
     */
    public final TableField<TicketsRecord, Integer> MONTH = createField("month", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>db_mall.tickets.paydate</code>.
     */
    public final TableField<TicketsRecord, Date> PAYDATE = createField("paydate", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>db_mall.tickets.acpaydate</code>.
     */
    public final TableField<TicketsRecord, Date> ACPAYDATE = createField("acpaydate", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>db_mall.tickets.paybyfrozen</code>.
     */
    public final TableField<TicketsRecord, Byte> PAYBYFROZEN = createField("paybyfrozen", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * Create a <code>db_mall.tickets</code> table reference
     */
    public Tickets() {
        this(DSL.name("tickets"), null);
    }

    /**
     * Create an aliased <code>db_mall.tickets</code> table reference
     */
    public Tickets(String alias) {
        this(DSL.name(alias), TICKETS);
    }

    /**
     * Create an aliased <code>db_mall.tickets</code> table reference
     */
    public Tickets(Name alias) {
        this(alias, TICKETS);
    }

    private Tickets(Name alias, Table<TicketsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tickets(Name alias, Table<TicketsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Tickets(Table<O> child, ForeignKey<O, TicketsRecord> key) {
        super(child, key, TICKETS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbMall.DB_MALL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TICKETS_ORDERID, Indexes.TICKETS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TicketsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TICKETS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TicketsRecord> getPrimaryKey() {
        return Keys.KEY_TICKETS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TicketsRecord>> getKeys() {
        return Arrays.<UniqueKey<TicketsRecord>>asList(Keys.KEY_TICKETS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tickets as(String alias) {
        return new Tickets(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tickets as(Name alias) {
        return new Tickets(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tickets rename(String name) {
        return new Tickets(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tickets rename(Name name) {
        return new Tickets(name, null);
    }
}
