/*
 * This file is generated by jOOQ.
 */
package cn.zyj.dbexporter.jooq.tables;


import cn.zyj.dbexporter.jooq.DbMall;
import cn.zyj.dbexporter.jooq.Indexes;
import cn.zyj.dbexporter.jooq.Keys;
import cn.zyj.dbexporter.jooq.tables.records.TOrderExchangeRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TOrderExchange extends TableImpl<TOrderExchangeRecord> {

    private static final long serialVersionUID = 514530197;

    /**
     * The reference instance of <code>db_mall.t_order_exchange</code>
     */
    public static final TOrderExchange T_ORDER_EXCHANGE = new TOrderExchange();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TOrderExchangeRecord> getRecordType() {
        return TOrderExchangeRecord.class;
    }

    /**
     * The column <code>db_mall.t_order_exchange.id</code>.
     */
    public final TableField<TOrderExchangeRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>db_mall.t_order_exchange.order_id</code>.
     */
    public final TableField<TOrderExchangeRecord, String> ORDER_ID = createField("order_id", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>db_mall.t_order_exchange.item_id</code>.
     */
    public final TableField<TOrderExchangeRecord, Long> ITEM_ID = createField("item_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>db_mall.t_order_exchange.item_detail_id</code>.
     */
    public final TableField<TOrderExchangeRecord, Long> ITEM_DETAIL_ID = createField("item_detail_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>db_mall.t_order_exchange.old_sku_id</code>.
     */
    public final TableField<TOrderExchangeRecord, Integer> OLD_SKU_ID = createField("old_sku_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>db_mall.t_order_exchange.new_sku_id</code>.
     */
    public final TableField<TOrderExchangeRecord, Integer> NEW_SKU_ID = createField("new_sku_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>db_mall.t_order_exchange.old_sn</code>.
     */
    public final TableField<TOrderExchangeRecord, String> OLD_SN = createField("old_sn", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>db_mall.t_order_exchange.new_sn</code>.
     */
    public final TableField<TOrderExchangeRecord, String> NEW_SN = createField("new_sn", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>db_mall.t_order_exchange.express_info</code>.
     */
    public final TableField<TOrderExchangeRecord, String> EXPRESS_INFO = createField("express_info", org.jooq.impl.SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>db_mall.t_order_exchange.status</code>.
     */
    public final TableField<TOrderExchangeRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>db_mall.t_order_exchange.cdate</code>.
     */
    public final TableField<TOrderExchangeRecord, Timestamp> CDATE = createField("cdate", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>db_mall.t_order_exchange.mdate</code>.
     */
    public final TableField<TOrderExchangeRecord, Timestamp> MDATE = createField("mdate", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>db_mall.t_order_exchange</code> table reference
     */
    public TOrderExchange() {
        this(DSL.name("t_order_exchange"), null);
    }

    /**
     * Create an aliased <code>db_mall.t_order_exchange</code> table reference
     */
    public TOrderExchange(String alias) {
        this(DSL.name(alias), T_ORDER_EXCHANGE);
    }

    /**
     * Create an aliased <code>db_mall.t_order_exchange</code> table reference
     */
    public TOrderExchange(Name alias) {
        this(alias, T_ORDER_EXCHANGE);
    }

    private TOrderExchange(Name alias, Table<TOrderExchangeRecord> aliased) {
        this(alias, aliased, null);
    }

    private TOrderExchange(Name alias, Table<TOrderExchangeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TOrderExchange(Table<O> child, ForeignKey<O, TOrderExchangeRecord> key) {
        super(child, key, T_ORDER_EXCHANGE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbMall.DB_MALL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_ORDER_EXCHANGE_ORDER_ID, Indexes.T_ORDER_EXCHANGE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TOrderExchangeRecord, Long> getIdentity() {
        return Keys.IDENTITY_T_ORDER_EXCHANGE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TOrderExchangeRecord> getPrimaryKey() {
        return Keys.KEY_T_ORDER_EXCHANGE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TOrderExchangeRecord>> getKeys() {
        return Arrays.<UniqueKey<TOrderExchangeRecord>>asList(Keys.KEY_T_ORDER_EXCHANGE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TOrderExchange as(String alias) {
        return new TOrderExchange(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TOrderExchange as(Name alias) {
        return new TOrderExchange(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TOrderExchange rename(String name) {
        return new TOrderExchange(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TOrderExchange rename(Name name) {
        return new TOrderExchange(name, null);
    }
}
