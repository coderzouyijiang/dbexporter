/*
 * This file is generated by jOOQ.
 */
package cn.zyj.dbexporter.jooq.tables;


import cn.zyj.dbexporter.jooq.DbMall;
import cn.zyj.dbexporter.jooq.Indexes;
import cn.zyj.dbexporter.jooq.Keys;
import cn.zyj.dbexporter.jooq.tables.records.TPicPatchListRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TPicPatchList extends TableImpl<TPicPatchListRecord> {

    private static final long serialVersionUID = -484433124;

    /**
     * The reference instance of <code>db_mall.t_pic_patch_list</code>
     */
    public static final TPicPatchList T_PIC_PATCH_LIST = new TPicPatchList();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TPicPatchListRecord> getRecordType() {
        return TPicPatchListRecord.class;
    }

    /**
     * The column <code>db_mall.t_pic_patch_list.id</code>.
     */
    public final TableField<TPicPatchListRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>db_mall.t_pic_patch_list.manager_id</code>.
     */
    public final TableField<TPicPatchListRecord, Integer> MANAGER_ID = createField("manager_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>db_mall.t_pic_patch_list.status</code>.
     */
    public final TableField<TPicPatchListRecord, Byte> STATUS = createField("status", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>db_mall.t_pic_patch_list.do_status</code>.
     */
    public final TableField<TPicPatchListRecord, Byte> DO_STATUS = createField("do_status", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>db_mall.t_pic_patch_list.url</code>.
     */
    public final TableField<TPicPatchListRecord, String> URL = createField("url", org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>db_mall.t_pic_patch_list.size</code>.
     */
    public final TableField<TPicPatchListRecord, Long> SIZE = createField("size", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>db_mall.t_pic_patch_list.dealed_list</code>.
     */
    public final TableField<TPicPatchListRecord, String> DEALED_LIST = createField("dealed_list", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>db_mall.t_pic_patch_list.path</code>.
     */
    public final TableField<TPicPatchListRecord, String> PATH = createField("path", org.jooq.impl.SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * The column <code>db_mall.t_pic_patch_list.sync_status</code>.
     */
    public final TableField<TPicPatchListRecord, Byte> SYNC_STATUS = createField("sync_status", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>db_mall.t_pic_patch_list.hash</code>.
     */
    public final TableField<TPicPatchListRecord, String> HASH = createField("hash", org.jooq.impl.SQLDataType.CHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>db_mall.t_pic_patch_list.cdate</code>.
     */
    public final TableField<TPicPatchListRecord, Timestamp> CDATE = createField("cdate", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>db_mall.t_pic_patch_list.mdate</code>.
     */
    public final TableField<TPicPatchListRecord, Timestamp> MDATE = createField("mdate", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>db_mall.t_pic_patch_list</code> table reference
     */
    public TPicPatchList() {
        this(DSL.name("t_pic_patch_list"), null);
    }

    /**
     * Create an aliased <code>db_mall.t_pic_patch_list</code> table reference
     */
    public TPicPatchList(String alias) {
        this(DSL.name(alias), T_PIC_PATCH_LIST);
    }

    /**
     * Create an aliased <code>db_mall.t_pic_patch_list</code> table reference
     */
    public TPicPatchList(Name alias) {
        this(alias, T_PIC_PATCH_LIST);
    }

    private TPicPatchList(Name alias, Table<TPicPatchListRecord> aliased) {
        this(alias, aliased, null);
    }

    private TPicPatchList(Name alias, Table<TPicPatchListRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TPicPatchList(Table<O> child, ForeignKey<O, TPicPatchListRecord> key) {
        super(child, key, T_PIC_PATCH_LIST);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbMall.DB_MALL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_PIC_PATCH_LIST_HASH, Indexes.T_PIC_PATCH_LIST_PRIMARY, Indexes.T_PIC_PATCH_LIST_STATUS, Indexes.T_PIC_PATCH_LIST_SYNC_STATUS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TPicPatchListRecord, Long> getIdentity() {
        return Keys.IDENTITY_T_PIC_PATCH_LIST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TPicPatchListRecord> getPrimaryKey() {
        return Keys.KEY_T_PIC_PATCH_LIST_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TPicPatchListRecord>> getKeys() {
        return Arrays.<UniqueKey<TPicPatchListRecord>>asList(Keys.KEY_T_PIC_PATCH_LIST_PRIMARY, Keys.KEY_T_PIC_PATCH_LIST_HASH);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TPicPatchList as(String alias) {
        return new TPicPatchList(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TPicPatchList as(Name alias) {
        return new TPicPatchList(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TPicPatchList rename(String name) {
        return new TPicPatchList(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TPicPatchList rename(Name name) {
        return new TPicPatchList(name, null);
    }
}
