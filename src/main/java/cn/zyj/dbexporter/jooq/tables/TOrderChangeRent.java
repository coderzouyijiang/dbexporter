/*
 * This file is generated by jOOQ.
 */
package cn.zyj.dbexporter.jooq.tables;


import cn.zyj.dbexporter.jooq.DbMall;
import cn.zyj.dbexporter.jooq.Indexes;
import cn.zyj.dbexporter.jooq.Keys;
import cn.zyj.dbexporter.jooq.tables.records.TOrderChangeRentRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TOrderChangeRent extends TableImpl<TOrderChangeRentRecord> {

    private static final long serialVersionUID = 1258591235;

    /**
     * The reference instance of <code>db_mall.t_order_change_rent</code>
     */
    public static final TOrderChangeRent T_ORDER_CHANGE_RENT = new TOrderChangeRent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TOrderChangeRentRecord> getRecordType() {
        return TOrderChangeRentRecord.class;
    }

    /**
     * The column <code>db_mall.t_order_change_rent.id</code>.
     */
    public final TableField<TOrderChangeRentRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>db_mall.t_order_change_rent.item_id</code>.
     */
    public final TableField<TOrderChangeRentRecord, Long> ITEM_ID = createField("item_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>db_mall.t_order_change_rent.item_detail_id</code>.
     */
    public final TableField<TOrderChangeRentRecord, Long> ITEM_DETAIL_ID = createField("item_detail_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>db_mall.t_order_change_rent.order_id</code>.
     */
    public final TableField<TOrderChangeRentRecord, String> ORDER_ID = createField("order_id", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>db_mall.t_order_change_rent.sku_id</code>.
     */
    public final TableField<TOrderChangeRentRecord, Integer> SKU_ID = createField("sku_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>db_mall.t_order_change_rent.old_amount</code>.
     */
    public final TableField<TOrderChangeRentRecord, BigDecimal> OLD_AMOUNT = createField("old_amount", org.jooq.impl.SQLDataType.DECIMAL(10, 2).nullable(false), this, "");

    /**
     * The column <code>db_mall.t_order_change_rent.new_amount</code>.
     */
    public final TableField<TOrderChangeRentRecord, BigDecimal> NEW_AMOUNT = createField("new_amount", org.jooq.impl.SQLDataType.DECIMAL(10, 2).nullable(false), this, "");

    /**
     * The column <code>db_mall.t_order_change_rent.cdate</code>.
     */
    public final TableField<TOrderChangeRentRecord, Timestamp> CDATE = createField("cdate", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>db_mall.t_order_change_rent.mdate</code>.
     */
    public final TableField<TOrderChangeRentRecord, Timestamp> MDATE = createField("mdate", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>db_mall.t_order_change_rent</code> table reference
     */
    public TOrderChangeRent() {
        this(DSL.name("t_order_change_rent"), null);
    }

    /**
     * Create an aliased <code>db_mall.t_order_change_rent</code> table reference
     */
    public TOrderChangeRent(String alias) {
        this(DSL.name(alias), T_ORDER_CHANGE_RENT);
    }

    /**
     * Create an aliased <code>db_mall.t_order_change_rent</code> table reference
     */
    public TOrderChangeRent(Name alias) {
        this(alias, T_ORDER_CHANGE_RENT);
    }

    private TOrderChangeRent(Name alias, Table<TOrderChangeRentRecord> aliased) {
        this(alias, aliased, null);
    }

    private TOrderChangeRent(Name alias, Table<TOrderChangeRentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TOrderChangeRent(Table<O> child, ForeignKey<O, TOrderChangeRentRecord> key) {
        super(child, key, T_ORDER_CHANGE_RENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbMall.DB_MALL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_ORDER_CHANGE_RENT_O_S, Indexes.T_ORDER_CHANGE_RENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TOrderChangeRentRecord, Integer> getIdentity() {
        return Keys.IDENTITY_T_ORDER_CHANGE_RENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TOrderChangeRentRecord> getPrimaryKey() {
        return Keys.KEY_T_ORDER_CHANGE_RENT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TOrderChangeRentRecord>> getKeys() {
        return Arrays.<UniqueKey<TOrderChangeRentRecord>>asList(Keys.KEY_T_ORDER_CHANGE_RENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TOrderChangeRent as(String alias) {
        return new TOrderChangeRent(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TOrderChangeRent as(Name alias) {
        return new TOrderChangeRent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TOrderChangeRent rename(String name) {
        return new TOrderChangeRent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TOrderChangeRent rename(Name name) {
        return new TOrderChangeRent(name, null);
    }
}
