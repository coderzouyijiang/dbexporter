/*
 * This file is generated by jOOQ.
 */
package cn.zyj.dbexporter.jooq.tables;


import cn.zyj.dbexporter.jooq.DbMall;
import cn.zyj.dbexporter.jooq.Indexes;
import cn.zyj.dbexporter.jooq.Keys;
import cn.zyj.dbexporter.jooq.tables.records.TOpLogsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TOpLogs extends TableImpl<TOpLogsRecord> {

    private static final long serialVersionUID = -1447730918;

    /**
     * The reference instance of <code>db_mall.t_op_logs</code>
     */
    public static final TOpLogs T_OP_LOGS = new TOpLogs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TOpLogsRecord> getRecordType() {
        return TOpLogsRecord.class;
    }

    /**
     * The column <code>db_mall.t_op_logs.id</code>.
     */
    public final TableField<TOpLogsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>db_mall.t_op_logs.manager_id</code>. 操作员id
     */
    public final TableField<TOpLogsRecord, Integer> MANAGER_ID = createField("manager_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "操作员id");

    /**
     * The column <code>db_mall.t_op_logs.type_id</code>. 0:商品分类 1：商品品牌 2：商品
     */
    public final TableField<TOpLogsRecord, Integer> TYPE_ID = createField("type_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "0:商品分类 1：商品品牌 2：商品");

    /**
     * The column <code>db_mall.t_op_logs.action_type</code>. 0:增加 1：修改 2：删除（假删除） 
     */
    public final TableField<TOpLogsRecord, Byte> ACTION_TYPE = createField("action_type", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "0:增加 1：修改 2：删除（假删除） ");

    /**
     * The column <code>db_mall.t_op_logs.ip</code>. ip地址
     */
    public final TableField<TOpLogsRecord, Long> IP = createField("ip", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "ip地址");

    /**
     * The column <code>db_mall.t_op_logs.agent</code>.
     */
    public final TableField<TOpLogsRecord, String> AGENT = createField("agent", org.jooq.impl.SQLDataType.VARCHAR(300), this, "");

    /**
     * The column <code>db_mall.t_op_logs.content</code>.
     */
    public final TableField<TOpLogsRecord, String> CONTENT = createField("content", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>db_mall.t_op_logs.cdate</code>.
     */
    public final TableField<TOpLogsRecord, Timestamp> CDATE = createField("cdate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>db_mall.t_op_logs.mdate</code>.
     */
    public final TableField<TOpLogsRecord, Timestamp> MDATE = createField("mdate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>db_mall.t_op_logs</code> table reference
     */
    public TOpLogs() {
        this(DSL.name("t_op_logs"), null);
    }

    /**
     * Create an aliased <code>db_mall.t_op_logs</code> table reference
     */
    public TOpLogs(String alias) {
        this(DSL.name(alias), T_OP_LOGS);
    }

    /**
     * Create an aliased <code>db_mall.t_op_logs</code> table reference
     */
    public TOpLogs(Name alias) {
        this(alias, T_OP_LOGS);
    }

    private TOpLogs(Name alias, Table<TOpLogsRecord> aliased) {
        this(alias, aliased, null);
    }

    private TOpLogs(Name alias, Table<TOpLogsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TOpLogs(Table<O> child, ForeignKey<O, TOpLogsRecord> key) {
        super(child, key, T_OP_LOGS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbMall.DB_MALL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_OP_LOGS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TOpLogsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_T_OP_LOGS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TOpLogsRecord> getPrimaryKey() {
        return Keys.KEY_T_OP_LOGS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TOpLogsRecord>> getKeys() {
        return Arrays.<UniqueKey<TOpLogsRecord>>asList(Keys.KEY_T_OP_LOGS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TOpLogs as(String alias) {
        return new TOpLogs(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TOpLogs as(Name alias) {
        return new TOpLogs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TOpLogs rename(String name) {
        return new TOpLogs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TOpLogs rename(Name name) {
        return new TOpLogs(name, null);
    }
}
