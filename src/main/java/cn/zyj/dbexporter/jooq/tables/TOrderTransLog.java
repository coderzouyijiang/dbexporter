/*
 * This file is generated by jOOQ.
 */
package cn.zyj.dbexporter.jooq.tables;


import cn.zyj.dbexporter.jooq.DbMall;
import cn.zyj.dbexporter.jooq.Indexes;
import cn.zyj.dbexporter.jooq.Keys;
import cn.zyj.dbexporter.jooq.tables.records.TOrderTransLogRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TOrderTransLog extends TableImpl<TOrderTransLogRecord> {

    private static final long serialVersionUID = -1752118210;

    /**
     * The reference instance of <code>db_mall.t_order_trans_log</code>
     */
    public static final TOrderTransLog T_ORDER_TRANS_LOG = new TOrderTransLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TOrderTransLogRecord> getRecordType() {
        return TOrderTransLogRecord.class;
    }

    /**
     * The column <code>db_mall.t_order_trans_log.id</code>.
     */
    public final TableField<TOrderTransLogRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>db_mall.t_order_trans_log.order_id</code>. 订单ID
     */
    public final TableField<TOrderTransLogRecord, String> ORDER_ID = createField("order_id", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "订单ID");

    /**
     * The column <code>db_mall.t_order_trans_log.type_id</code>.
     */
    public final TableField<TOrderTransLogRecord, Integer> TYPE_ID = createField("type_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>db_mall.t_order_trans_log.msg</code>. 操作描述信息
     */
    public final TableField<TOrderTransLogRecord, String> MSG = createField("msg", org.jooq.impl.SQLDataType.VARCHAR(200), this, "操作描述信息");

    /**
     * The column <code>db_mall.t_order_trans_log.oper</code>. 操作人
     */
    public final TableField<TOrderTransLogRecord, String> OPER = createField("oper", org.jooq.impl.SQLDataType.VARCHAR(200), this, "操作人");

    /**
     * The column <code>db_mall.t_order_trans_log.cdate</code>.
     */
    public final TableField<TOrderTransLogRecord, Timestamp> CDATE = createField("cdate", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>db_mall.t_order_trans_log.mdate</code>. 修改时间
     */
    public final TableField<TOrderTransLogRecord, Timestamp> MDATE = createField("mdate", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "修改时间");

    /**
     * Create a <code>db_mall.t_order_trans_log</code> table reference
     */
    public TOrderTransLog() {
        this(DSL.name("t_order_trans_log"), null);
    }

    /**
     * Create an aliased <code>db_mall.t_order_trans_log</code> table reference
     */
    public TOrderTransLog(String alias) {
        this(DSL.name(alias), T_ORDER_TRANS_LOG);
    }

    /**
     * Create an aliased <code>db_mall.t_order_trans_log</code> table reference
     */
    public TOrderTransLog(Name alias) {
        this(alias, T_ORDER_TRANS_LOG);
    }

    private TOrderTransLog(Name alias, Table<TOrderTransLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private TOrderTransLog(Name alias, Table<TOrderTransLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TOrderTransLog(Table<O> child, ForeignKey<O, TOrderTransLogRecord> key) {
        super(child, key, T_ORDER_TRANS_LOG);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbMall.DB_MALL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_ORDER_TRANS_LOG_ORDER_ID, Indexes.T_ORDER_TRANS_LOG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TOrderTransLogRecord, Long> getIdentity() {
        return Keys.IDENTITY_T_ORDER_TRANS_LOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TOrderTransLogRecord> getPrimaryKey() {
        return Keys.KEY_T_ORDER_TRANS_LOG_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TOrderTransLogRecord>> getKeys() {
        return Arrays.<UniqueKey<TOrderTransLogRecord>>asList(Keys.KEY_T_ORDER_TRANS_LOG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TOrderTransLog as(String alias) {
        return new TOrderTransLog(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TOrderTransLog as(Name alias) {
        return new TOrderTransLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TOrderTransLog rename(String name) {
        return new TOrderTransLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TOrderTransLog rename(Name name) {
        return new TOrderTransLog(name, null);
    }
}
