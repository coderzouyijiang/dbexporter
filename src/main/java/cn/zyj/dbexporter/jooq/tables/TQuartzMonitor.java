/*
 * This file is generated by jOOQ.
 */
package cn.zyj.dbexporter.jooq.tables;


import cn.zyj.dbexporter.jooq.DbMall;
import cn.zyj.dbexporter.jooq.Indexes;
import cn.zyj.dbexporter.jooq.Keys;
import cn.zyj.dbexporter.jooq.tables.records.TQuartzMonitorRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TQuartzMonitor extends TableImpl<TQuartzMonitorRecord> {

    private static final long serialVersionUID = -1860192044;

    /**
     * The reference instance of <code>db_mall.t_quartz_monitor</code>
     */
    public static final TQuartzMonitor T_QUARTZ_MONITOR = new TQuartzMonitor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TQuartzMonitorRecord> getRecordType() {
        return TQuartzMonitorRecord.class;
    }

    /**
     * The column <code>db_mall.t_quartz_monitor.id</code>. 主键
     */
    public final TableField<TQuartzMonitorRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>db_mall.t_quartz_monitor.task_name</code>. 定时任务类名
     */
    public final TableField<TQuartzMonitorRecord, String> TASK_NAME = createField("task_name", org.jooq.impl.SQLDataType.VARCHAR(500).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "定时任务类名");

    /**
     * The column <code>db_mall.t_quartz_monitor.status</code>. 定时任务执行状态（0、未成功，1、已成功）
     */
    public final TableField<TQuartzMonitorRecord, Short> STATUS = createField("status", org.jooq.impl.SQLDataType.SMALLINT, this, "定时任务执行状态（0、未成功，1、已成功）");

    /**
     * The column <code>db_mall.t_quartz_monitor.cdate</code>.
     */
    public final TableField<TQuartzMonitorRecord, Timestamp> CDATE = createField("cdate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>db_mall.t_quartz_monitor.mdate</code>.
     */
    public final TableField<TQuartzMonitorRecord, Timestamp> MDATE = createField("mdate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>db_mall.t_quartz_monitor</code> table reference
     */
    public TQuartzMonitor() {
        this(DSL.name("t_quartz_monitor"), null);
    }

    /**
     * Create an aliased <code>db_mall.t_quartz_monitor</code> table reference
     */
    public TQuartzMonitor(String alias) {
        this(DSL.name(alias), T_QUARTZ_MONITOR);
    }

    /**
     * Create an aliased <code>db_mall.t_quartz_monitor</code> table reference
     */
    public TQuartzMonitor(Name alias) {
        this(alias, T_QUARTZ_MONITOR);
    }

    private TQuartzMonitor(Name alias, Table<TQuartzMonitorRecord> aliased) {
        this(alias, aliased, null);
    }

    private TQuartzMonitor(Name alias, Table<TQuartzMonitorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TQuartzMonitor(Table<O> child, ForeignKey<O, TQuartzMonitorRecord> key) {
        super(child, key, T_QUARTZ_MONITOR);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbMall.DB_MALL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_QUARTZ_MONITOR_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TQuartzMonitorRecord, Long> getIdentity() {
        return Keys.IDENTITY_T_QUARTZ_MONITOR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TQuartzMonitorRecord> getPrimaryKey() {
        return Keys.KEY_T_QUARTZ_MONITOR_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TQuartzMonitorRecord>> getKeys() {
        return Arrays.<UniqueKey<TQuartzMonitorRecord>>asList(Keys.KEY_T_QUARTZ_MONITOR_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TQuartzMonitor as(String alias) {
        return new TQuartzMonitor(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TQuartzMonitor as(Name alias) {
        return new TQuartzMonitor(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TQuartzMonitor rename(String name) {
        return new TQuartzMonitor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TQuartzMonitor rename(Name name) {
        return new TQuartzMonitor(name, null);
    }
}
