/*
 * This file is generated by jOOQ.
 */
package cn.zyj.dbexporter.jooq.tables;


import cn.zyj.dbexporter.jooq.DbMall;
import cn.zyj.dbexporter.jooq.Indexes;
import cn.zyj.dbexporter.jooq.Keys;
import cn.zyj.dbexporter.jooq.tables.records.AssetsDeviceRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AssetsDevice extends TableImpl<AssetsDeviceRecord> {

    private static final long serialVersionUID = 475618445;

    /**
     * The reference instance of <code>db_mall.assets_device</code>
     */
    public static final AssetsDevice ASSETS_DEVICE = new AssetsDevice();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AssetsDeviceRecord> getRecordType() {
        return AssetsDeviceRecord.class;
    }

    /**
     * The column <code>db_mall.assets_device.id</code>.
     */
    public final TableField<AssetsDeviceRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>db_mall.assets_device.title</code>. 商品title
     */
    public final TableField<AssetsDeviceRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "商品title");

    /**
     * The column <code>db_mall.assets_device.customer_id</code>. 当前在租用户
     */
    public final TableField<AssetsDeviceRecord, Long> CUSTOMER_ID = createField("customer_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "当前在租用户");

    /**
     * The column <code>db_mall.assets_device.status</code>. 状态：1待入库2闲置3已领用4已退租
     */
    public final TableField<AssetsDeviceRecord, Byte> STATUS = createField("status", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.TINYINT)), this, "状态：1待入库2闲置3已领用4已退租");

    /**
     * The column <code>db_mall.assets_device.brand</code>. 品牌
     */
    public final TableField<AssetsDeviceRecord, String> BRAND = createField("brand", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "品牌");

    /**
     * The column <code>db_mall.assets_device.sn</code>. 编码
     */
    public final TableField<AssetsDeviceRecord, String> SN = createField("sn", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "编码");

    /**
     * The column <code>db_mall.assets_device.processor</code>. 处理器
     */
    public final TableField<AssetsDeviceRecord, String> PROCESSOR = createField("processor", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "处理器");

    /**
     * The column <code>db_mall.assets_device.ram</code>. 内存
     */
    public final TableField<AssetsDeviceRecord, String> RAM = createField("ram", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "内存");

    /**
     * The column <code>db_mall.assets_device.disk</code>. 硬盘
     */
    public final TableField<AssetsDeviceRecord, String> DISK = createField("disk", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "硬盘");

    /**
     * The column <code>db_mall.assets_device.store_location</code>. 入库地点
     */
    public final TableField<AssetsDeviceRecord, String> STORE_LOCATION = createField("store_location", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "入库地点");

    /**
     * The column <code>db_mall.assets_device.cdate</code>. 创建时间
     */
    public final TableField<AssetsDeviceRecord, Timestamp> CDATE = createField("cdate", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0000-00-00 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建时间");

    /**
     * The column <code>db_mall.assets_device.mdate</code>. 修改时间
     */
    public final TableField<AssetsDeviceRecord, Timestamp> MDATE = createField("mdate", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "修改时间");

    /**
     * Create a <code>db_mall.assets_device</code> table reference
     */
    public AssetsDevice() {
        this(DSL.name("assets_device"), null);
    }

    /**
     * Create an aliased <code>db_mall.assets_device</code> table reference
     */
    public AssetsDevice(String alias) {
        this(DSL.name(alias), ASSETS_DEVICE);
    }

    /**
     * Create an aliased <code>db_mall.assets_device</code> table reference
     */
    public AssetsDevice(Name alias) {
        this(alias, ASSETS_DEVICE);
    }

    private AssetsDevice(Name alias, Table<AssetsDeviceRecord> aliased) {
        this(alias, aliased, null);
    }

    private AssetsDevice(Name alias, Table<AssetsDeviceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> AssetsDevice(Table<O> child, ForeignKey<O, AssetsDeviceRecord> key) {
        super(child, key, ASSETS_DEVICE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbMall.DB_MALL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ASSETS_DEVICE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AssetsDeviceRecord, Long> getIdentity() {
        return Keys.IDENTITY_ASSETS_DEVICE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AssetsDeviceRecord> getPrimaryKey() {
        return Keys.KEY_ASSETS_DEVICE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AssetsDeviceRecord>> getKeys() {
        return Arrays.<UniqueKey<AssetsDeviceRecord>>asList(Keys.KEY_ASSETS_DEVICE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AssetsDevice as(String alias) {
        return new AssetsDevice(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AssetsDevice as(Name alias) {
        return new AssetsDevice(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AssetsDevice rename(String name) {
        return new AssetsDevice(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AssetsDevice rename(Name name) {
        return new AssetsDevice(name, null);
    }
}
