/*
 * This file is generated by jOOQ.
 */
package cn.zyj.dbexporter.jooq.tables;


import cn.zyj.dbexporter.jooq.DbMall;
import cn.zyj.dbexporter.jooq.Indexes;
import cn.zyj.dbexporter.jooq.Keys;
import cn.zyj.dbexporter.jooq.tables.records.TCustomerAccountRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TCustomerAccount extends TableImpl<TCustomerAccountRecord> {

    private static final long serialVersionUID = 297322703;

    /**
     * The reference instance of <code>db_mall.t_customer_account</code>
     */
    public static final TCustomerAccount T_CUSTOMER_ACCOUNT = new TCustomerAccount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TCustomerAccountRecord> getRecordType() {
        return TCustomerAccountRecord.class;
    }

    /**
     * The column <code>db_mall.t_customer_account.id</code>.
     */
    public final TableField<TCustomerAccountRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>db_mall.t_customer_account.customer_id</code>.
     */
    public final TableField<TCustomerAccountRecord, Long> CUSTOMER_ID = createField("customer_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>db_mall.t_customer_account.account</code>. 账号
     */
    public final TableField<TCustomerAccountRecord, String> ACCOUNT = createField("account", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "账号");

    /**
     * The column <code>db_mall.t_customer_account.receive_phone</code>. 接受通知手机号
     */
    public final TableField<TCustomerAccountRecord, String> RECEIVE_PHONE = createField("receive_phone", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "接受通知手机号");

    /**
     * The column <code>db_mall.t_customer_account.phone</code>. 绑定手机号
     */
    public final TableField<TCustomerAccountRecord, String> PHONE = createField("phone", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "绑定手机号");

    /**
     * The column <code>db_mall.t_customer_account.salt</code>.
     */
    public final TableField<TCustomerAccountRecord, String> SALT = createField("salt", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>db_mall.t_customer_account.password</code>. 密码
     */
    public final TableField<TCustomerAccountRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "密码");

    /**
     * The column <code>db_mall.t_customer_account.level</code>. 等级，1：管理员 2：普通
     */
    public final TableField<TCustomerAccountRecord, Integer> LEVEL = createField("level", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.INTEGER)), this, "等级，1：管理员 2：普通");

    /**
     * The column <code>db_mall.t_customer_account.error_login_time</code>. 登录错误次数
     */
    public final TableField<TCustomerAccountRecord, Integer> ERROR_LOGIN_TIME = createField("error_login_time", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "登录错误次数");

    /**
     * The column <code>db_mall.t_customer_account.status</code>. 状态0:禁用 1：有效，2：删除
     */
    public final TableField<TCustomerAccountRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.INTEGER)), this, "状态0:禁用 1：有效，2：删除");

    /**
     * The column <code>db_mall.t_customer_account.old_customer_id</code>. 原绑定用户
     */
    public final TableField<TCustomerAccountRecord, Long> OLD_CUSTOMER_ID = createField("old_customer_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "原绑定用户");

    /**
     * The column <code>db_mall.t_customer_account.personal</code>. 是否点击过我是个人用户1点过
     */
    public final TableField<TCustomerAccountRecord, Integer> PERSONAL = createField("personal", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "是否点击过我是个人用户1点过");

    /**
     * The column <code>db_mall.t_customer_account.cdate</code>. 创建时间
     */
    public final TableField<TCustomerAccountRecord, Timestamp> CDATE = createField("cdate", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建时间");

    /**
     * The column <code>db_mall.t_customer_account.mdate</code>. 修改时间
     */
    public final TableField<TCustomerAccountRecord, Timestamp> MDATE = createField("mdate", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "修改时间");

    /**
     * Create a <code>db_mall.t_customer_account</code> table reference
     */
    public TCustomerAccount() {
        this(DSL.name("t_customer_account"), null);
    }

    /**
     * Create an aliased <code>db_mall.t_customer_account</code> table reference
     */
    public TCustomerAccount(String alias) {
        this(DSL.name(alias), T_CUSTOMER_ACCOUNT);
    }

    /**
     * Create an aliased <code>db_mall.t_customer_account</code> table reference
     */
    public TCustomerAccount(Name alias) {
        this(alias, T_CUSTOMER_ACCOUNT);
    }

    private TCustomerAccount(Name alias, Table<TCustomerAccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private TCustomerAccount(Name alias, Table<TCustomerAccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TCustomerAccount(Table<O> child, ForeignKey<O, TCustomerAccountRecord> key) {
        super(child, key, T_CUSTOMER_ACCOUNT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbMall.DB_MALL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_CUSTOMER_ACCOUNT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TCustomerAccountRecord, Long> getIdentity() {
        return Keys.IDENTITY_T_CUSTOMER_ACCOUNT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TCustomerAccountRecord> getPrimaryKey() {
        return Keys.KEY_T_CUSTOMER_ACCOUNT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TCustomerAccountRecord>> getKeys() {
        return Arrays.<UniqueKey<TCustomerAccountRecord>>asList(Keys.KEY_T_CUSTOMER_ACCOUNT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TCustomerAccount as(String alias) {
        return new TCustomerAccount(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TCustomerAccount as(Name alias) {
        return new TCustomerAccount(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TCustomerAccount rename(String name) {
        return new TCustomerAccount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TCustomerAccount rename(Name name) {
        return new TCustomerAccount(name, null);
    }
}
