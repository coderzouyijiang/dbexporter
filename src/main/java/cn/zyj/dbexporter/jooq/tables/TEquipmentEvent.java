/*
 * This file is generated by jOOQ.
 */
package cn.zyj.dbexporter.jooq.tables;


import cn.zyj.dbexporter.jooq.DbMall;
import cn.zyj.dbexporter.jooq.Indexes;
import cn.zyj.dbexporter.jooq.Keys;
import cn.zyj.dbexporter.jooq.tables.records.TEquipmentEventRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TEquipmentEvent extends TableImpl<TEquipmentEventRecord> {

    private static final long serialVersionUID = -1899678959;

    /**
     * The reference instance of <code>db_mall.t_equipment_event</code>
     */
    public static final TEquipmentEvent T_EQUIPMENT_EVENT = new TEquipmentEvent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TEquipmentEventRecord> getRecordType() {
        return TEquipmentEventRecord.class;
    }

    /**
     * The column <code>db_mall.t_equipment_event.id</code>.
     */
    public final TableField<TEquipmentEventRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>db_mall.t_equipment_event.customer</code>.
     */
    public final TableField<TEquipmentEventRecord, Long> CUSTOMER = createField("customer", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>db_mall.t_equipment_event.order_id</code>.
     */
    public final TableField<TEquipmentEventRecord, String> ORDER_ID = createField("order_id", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>db_mall.t_equipment_event.sn</code>.
     */
    public final TableField<TEquipmentEventRecord, String> SN = createField("sn", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>db_mall.t_equipment_event.operator</code>.
     */
    public final TableField<TEquipmentEventRecord, String> OPERATOR = createField("operator", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>db_mall.t_equipment_event.message</code>.
     */
    public final TableField<TEquipmentEventRecord, String> MESSAGE = createField("message", org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>db_mall.t_equipment_event.event_type</code>.
     */
    public final TableField<TEquipmentEventRecord, Byte> EVENT_TYPE = createField("event_type", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>db_mall.t_equipment_event.operate_time</code>.
     */
    public final TableField<TEquipmentEventRecord, Timestamp> OPERATE_TIME = createField("operate_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>db_mall.t_equipment_event.create_time</code>.
     */
    public final TableField<TEquipmentEventRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>db_mall.t_equipment_event</code> table reference
     */
    public TEquipmentEvent() {
        this(DSL.name("t_equipment_event"), null);
    }

    /**
     * Create an aliased <code>db_mall.t_equipment_event</code> table reference
     */
    public TEquipmentEvent(String alias) {
        this(DSL.name(alias), T_EQUIPMENT_EVENT);
    }

    /**
     * Create an aliased <code>db_mall.t_equipment_event</code> table reference
     */
    public TEquipmentEvent(Name alias) {
        this(alias, T_EQUIPMENT_EVENT);
    }

    private TEquipmentEvent(Name alias, Table<TEquipmentEventRecord> aliased) {
        this(alias, aliased, null);
    }

    private TEquipmentEvent(Name alias, Table<TEquipmentEventRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TEquipmentEvent(Table<O> child, ForeignKey<O, TEquipmentEventRecord> key) {
        super(child, key, T_EQUIPMENT_EVENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbMall.DB_MALL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_EQUIPMENT_EVENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TEquipmentEventRecord> getPrimaryKey() {
        return Keys.KEY_T_EQUIPMENT_EVENT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TEquipmentEventRecord>> getKeys() {
        return Arrays.<UniqueKey<TEquipmentEventRecord>>asList(Keys.KEY_T_EQUIPMENT_EVENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TEquipmentEvent as(String alias) {
        return new TEquipmentEvent(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TEquipmentEvent as(Name alias) {
        return new TEquipmentEvent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TEquipmentEvent rename(String name) {
        return new TEquipmentEvent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TEquipmentEvent rename(Name name) {
        return new TEquipmentEvent(name, null);
    }
}
