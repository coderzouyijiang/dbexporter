/*
 * This file is generated by jOOQ.
 */
package cn.zyj.dbexporter.jooq.tables;


import cn.zyj.dbexporter.jooq.DbMall;
import cn.zyj.dbexporter.jooq.Indexes;
import cn.zyj.dbexporter.jooq.Keys;
import cn.zyj.dbexporter.jooq.tables.records.TSmsLogRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TSmsLog extends TableImpl<TSmsLogRecord> {

    private static final long serialVersionUID = -1022102206;

    /**
     * The reference instance of <code>db_mall.t_sms_log</code>
     */
    public static final TSmsLog T_SMS_LOG = new TSmsLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TSmsLogRecord> getRecordType() {
        return TSmsLogRecord.class;
    }

    /**
     * The column <code>db_mall.t_sms_log.id</code>.
     */
    public final TableField<TSmsLogRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>db_mall.t_sms_log.phone</code>.
     */
    public final TableField<TSmsLogRecord, String> PHONE = createField("phone", org.jooq.impl.SQLDataType.CHAR(11).nullable(false), this, "");

    /**
     * The column <code>db_mall.t_sms_log.content</code>.
     */
    public final TableField<TSmsLogRecord, String> CONTENT = createField("content", org.jooq.impl.SQLDataType.VARCHAR(1000).nullable(false), this, "");

    /**
     * The column <code>db_mall.t_sms_log.sms_id</code>.
     */
    public final TableField<TSmsLogRecord, String> SMS_ID = createField("sms_id", org.jooq.impl.SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>db_mall.t_sms_log.status</code>. 1:提交失败 2:提交成功 3:发送失败 4:发送成功
     */
    public final TableField<TSmsLogRecord, Byte> STATUS = createField("status", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.TINYINT)), this, "1:提交失败 2:提交成功 3:发送失败 4:发送成功");

    /**
     * The column <code>db_mall.t_sms_log.error_code</code>. 运营商错误码
     */
    public final TableField<TSmsLogRecord, String> ERROR_CODE = createField("error_code", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "运营商错误码");

    /**
     * The column <code>db_mall.t_sms_log.response</code>.
     */
    public final TableField<TSmsLogRecord, String> RESPONSE = createField("response", org.jooq.impl.SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>db_mall.t_sms_log.type_id</code>.
     */
    public final TableField<TSmsLogRecord, Byte> TYPE_ID = createField("type_id", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>db_mall.t_sms_log.notify_str</code>.
     */
    public final TableField<TSmsLogRecord, String> NOTIFY_STR = createField("notify_str", org.jooq.impl.SQLDataType.VARCHAR(300), this, "");

    /**
     * The column <code>db_mall.t_sms_log.channel_id</code>.
     */
    public final TableField<TSmsLogRecord, Byte> CHANNEL_ID = createField("channel_id", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>db_mall.t_sms_log.cdate</code>.
     */
    public final TableField<TSmsLogRecord, Timestamp> CDATE = createField("cdate", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>db_mall.t_sms_log.mdate</code>.
     */
    public final TableField<TSmsLogRecord, Timestamp> MDATE = createField("mdate", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>db_mall.t_sms_log.sys_type</code>.
     */
    public final TableField<TSmsLogRecord, UByte> SYS_TYPE = createField("sys_type", org.jooq.impl.SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.TINYINTUNSIGNED)), this, "");

    /**
     * The column <code>db_mall.t_sms_log.biz_type</code>.
     */
    public final TableField<TSmsLogRecord, UByte> BIZ_TYPE = createField("biz_type", org.jooq.impl.SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.TINYINTUNSIGNED)), this, "");

    /**
     * Create a <code>db_mall.t_sms_log</code> table reference
     */
    public TSmsLog() {
        this(DSL.name("t_sms_log"), null);
    }

    /**
     * Create an aliased <code>db_mall.t_sms_log</code> table reference
     */
    public TSmsLog(String alias) {
        this(DSL.name(alias), T_SMS_LOG);
    }

    /**
     * Create an aliased <code>db_mall.t_sms_log</code> table reference
     */
    public TSmsLog(Name alias) {
        this(alias, T_SMS_LOG);
    }

    private TSmsLog(Name alias, Table<TSmsLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private TSmsLog(Name alias, Table<TSmsLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TSmsLog(Table<O> child, ForeignKey<O, TSmsLogRecord> key) {
        super(child, key, T_SMS_LOG);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbMall.DB_MALL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_SMS_LOG_PHONE, Indexes.T_SMS_LOG_PRIMARY, Indexes.T_SMS_LOG_SMS_ID, Indexes.T_SMS_LOG_STATUS_TYPE_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TSmsLogRecord, Long> getIdentity() {
        return Keys.IDENTITY_T_SMS_LOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TSmsLogRecord> getPrimaryKey() {
        return Keys.KEY_T_SMS_LOG_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TSmsLogRecord>> getKeys() {
        return Arrays.<UniqueKey<TSmsLogRecord>>asList(Keys.KEY_T_SMS_LOG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TSmsLog as(String alias) {
        return new TSmsLog(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TSmsLog as(Name alias) {
        return new TSmsLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TSmsLog rename(String name) {
        return new TSmsLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TSmsLog rename(Name name) {
        return new TSmsLog(name, null);
    }
}
